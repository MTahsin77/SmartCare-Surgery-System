File: E:\SmartCare-Surgery-System\appointments\admin.py
from django.contrib import admin
from .models import Appointment

admin.site.register(Appointment)


================================================================================

File: E:\SmartCare-Surgery-System\appointments\apps.py
from django.apps import AppConfig


class AppointmentsConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'appointments'


================================================================================

File: E:\SmartCare-Surgery-System\appointments\calendar_service.py
import os
from google.oauth2.credentials import Credentials
from google_auth_oauthlib.flow import Flow
from googleapiclient.discovery import build
from django.conf import settings
from django.urls import reverse

def get_calendar_service(request):
    credentials = get_credentials(request)
    return build('calendar', 'v3', credentials=credentials)

def get_credentials(request):
    if 'credentials' not in request.session:
        return None

    return Credentials(
        **request.session['credentials'],
        scopes=settings.GOOGLE_OAUTH2_SCOPES
    )

def create_flow(request):
    flow = Flow.from_client_secrets_file(
        settings.GOOGLE_OAUTH2_CLIENT_SECRETS_JSON,
        scopes=settings.GOOGLE_OAUTH2_SCOPES,
        redirect_uri=request.build_absolute_uri(reverse('oauth2callback'))
    )
    return flow

def create_calendar_event(service, summary, description, start_time, end_time):
    event = {
        'summary': summary,
        'description': description,
        'start': {
            'dateTime': start_time.isoformat(),
            'timeZone': 'Europe/London',
        },
        'end': {
            'dateTime': end_time.isoformat(),
            'timeZone': 'Europe/London',
        },
    }
    return service.events().insert(calendarId='primary', body=event).execute()

def update_calendar_event(service, event_id, summary, description, start_time, end_time):
    event = service.events().get(calendarId='primary', eventId=event_id).execute()
    event.update({
        'summary': summary,
        'description': description,
        'start': {
            'dateTime': start_time.isoformat(),
            'timeZone': 'Europe/London',
        },
        'end': {
            'dateTime': end_time.isoformat(),
            'timeZone': 'Europe/London',
        },
    })
    return service.events().update(calendarId='primary', eventId=event_id, body=event).execute()

def delete_calendar_event(service, event_id):
    service.events().delete(calendarId='primary', eventId=event_id).execute()

================================================================================

File: E:\SmartCare-Surgery-System\appointments\forms.py
from django import forms
from .models import Appointment, Prescription, Invoice, PrescriptionRequest, Fee, Rate
from authentication.models import User
from django.utils import timezone
import logging
from datetime import datetime, timedelta

logger = logging.getLogger(__name__)


class AppointmentForm(forms.ModelForm):
    doctor_or_nurse = forms.ChoiceField(choices=[('doctor', 'Doctor'), ('nurse', 'Nurse')], required=True)
    specialty = forms.ChoiceField(choices=[('', 'Any Specialty')] + list(User.DOCTOR_SPECIALTIES), required=False)
    staff = forms.ModelChoiceField(queryset=User.objects.none(), required=True)

    class Meta:
        model = Appointment
        fields = ['date', 'time', 'reason', 'doctor_or_nurse', 'specialty', 'staff', 'appointment_type']
        widgets = {
            'date': forms.DateInput(attrs={'type': 'date'}),
            'time': forms.TimeInput(attrs={'type': 'time'}),
        }

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.fields['specialty'].required = False
        if 'doctor_or_nurse' in self.data:
            if self.data.get('doctor_or_nurse') == 'doctor':
                self.fields['staff'].queryset = User.objects.filter(user_type='doctor')
            else:
                self.fields['staff'].queryset = User.objects.filter(user_type='nurse')
        elif self.instance.pk:
            if self.instance.doctor:
                self.fields['doctor_or_nurse'].initial = 'doctor'
                self.fields['staff'].queryset = User.objects.filter(user_type='doctor')
                self.fields['staff'].initial = self.instance.doctor
            elif self.instance.nurse:
                self.fields['doctor_or_nurse'].initial = 'nurse'
                self.fields['staff'].queryset = User.objects.filter(user_type='nurse')
                self.fields['staff'].initial = self.instance.nurse
            else:
                self.fields['staff'].queryset = User.objects.filter(user_type__in=['doctor', 'nurse'])

    def clean(self):
        cleaned_data = super().clean()
        doctor_or_nurse = cleaned_data.get('doctor_or_nurse')
        staff = cleaned_data.get('staff')

        if doctor_or_nurse == 'doctor':
            cleaned_data['doctor'] = staff
            cleaned_data['nurse'] = None
        elif doctor_or_nurse == 'nurse':
            cleaned_data['nurse'] = staff
            cleaned_data['doctor'] = None

        return cleaned_data


class PrescriptionForm(forms.ModelForm):
    class Meta:
        model = Prescription
        fields = ['medication', 'dosage', 'instructions', 'is_repeatable']
        widgets = {
            'instructions': forms.Textarea(attrs={'rows': 4, 'cols': 40}),
        }

class PrescriptionRequestForm(forms.ModelForm):
    class Meta:
        model = PrescriptionRequest
        fields = ['notes']
        widgets = {
            'notes': forms.Textarea(attrs={'rows': 4, 'cols': 40}),
        }

class InvoiceForm(forms.ModelForm):
    class Meta:
        model = Invoice
        fields = ['patient_type', 'consultation_length', 'rate', 'payment_status']
        widgets = {
            'consultation_length': forms.NumberInput(attrs={'min': 10, 'step': 10}),
        }

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        user = kwargs.pop('user', None)
        if not user or not user.is_admin():
            for field in self.fields:
                self.fields[field].widget.attrs['readonly'] = True

    def clean_consultation_length(self):
        length = self.cleaned_data.get('consultation_length')
        if length is not None and length % 10 != 0:
            raise forms.ValidationError("Consultation length must be in multiples of 10 minutes.")
        return length

class InvoiceStatusForm(forms.ModelForm):
    class Meta:
        model = Invoice
        fields = ['payment_status']

class FeeForm(forms.ModelForm):
    class Meta:
        model = Fee
        fields = ['title', 'amount', 'patient_type']

    def clean_amount(self):
        amount = self.cleaned_data.get('amount')
        if amount <= 0:
            raise forms.ValidationError("Amount must be greater than zero.")
        return amount

class RateForm(forms.ModelForm):
    class Meta:
        model = Rate
        fields = ['rate_type', 'amount']


class AppointmentTypeFilterForm(forms.Form):
    appointment_type = forms.ChoiceField(
        choices=[('', 'All Types')] + list(Appointment.APPOINTMENT_TYPES),
        required=False,
        widget=forms.Select(attrs={'class': 'form-control'})
    )

class DateRangeFilterForm(forms.Form):
    start_date = forms.DateField(widget=forms.DateInput(attrs={'type': 'date'}), required=False)
    end_date = forms.DateField(widget=forms.DateInput(attrs={'type': 'date'}), required=False)

class RateSettingForm(forms.Form):
    nhs_rate = forms.DecimalField(max_digits=6, decimal_places=2, min_value=0)
    private_rate = forms.DecimalField(max_digits=6, decimal_places=2, min_value=0)

    def clean(self):
        cleaned_data = super().clean()
        nhs_rate = cleaned_data.get('nhs_rate')
        private_rate = cleaned_data.get('private_rate')

        if nhs_rate and nhs_rate <= 0:
            self.add_error('nhs_rate', "NHS rate must be greater than zero.")
        if private_rate and private_rate <= 0:
            self.add_error('private_rate', "Private rate must be greater than zero.")

        return cleaned_data

class DoctorSpecialtyFilterForm(forms.Form):
    specialty = forms.ChoiceField(choices=[('', 'All Specialties')] + list(User.DOCTOR_SPECIALTIES), required=False)


================================================================================

File: E:\SmartCare-Surgery-System\appointments\models.py
from django.db import models
from django.conf import settings
from django.utils import timezone
from datetime import datetime, timedelta
from django.core.exceptions import ValidationError
from decimal import Decimal
from authentication.models import User

class Appointment(models.Model):
    STAFF_CHOICES = [
        ('doctor', 'Doctor'),
        ('nurse', 'Nurse')
    ]
    STATUS_CHOICES = [
        ('SCHEDULED', 'Scheduled'),
        ('COMPLETED', 'Completed'),
        ('CANCELED', 'Canceled')
    ]
    APPOINTMENT_TYPES = [
        ('SURGERY', 'Surgery'),
        ('GENERAL_CHECKUP', 'General Checkup'),
        ('DENTAL', 'Dental Consultation'),
        ('PHYSICAL_THERAPY', 'Physical Therapy'),
        ('DERMATOLOGY', 'Dermatology'),
        ('CARDIOLOGY', 'Cardiology'),
        ('NEUROLOGY', 'Neurology'),
    ]
    patient = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE, related_name='appointments_as_patient')
    doctor = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.SET_NULL, related_name='appointments_as_doctor', null=True, blank=True)
    nurse = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.SET_NULL, related_name='appointments_as_nurse', null=True, blank=True)
    date = models.DateField()
    time = models.TimeField(default="12:00:00")
    end_time = models.TimeField()
    reason = models.TextField(help_text="Reason for the appointment", blank=True, default="General checkup")
    status = models.CharField(max_length=10, choices=STATUS_CHOICES, default='SCHEDULED')
    doctor_or_nurse = models.CharField(max_length=10, choices=STAFF_CHOICES, null=True, blank=True)
    appointment_type = models.CharField(max_length=20, choices=APPOINTMENT_TYPES, default='GENERAL_CHECKUP')

    def update_status(self, new_status):
        if new_status in dict(self.STATUS_CHOICES):
            self.status = new_status
            self.save(update_fields=['status'])
        else:
            raise ValueError(f"Invalid status: {new_status}")
        
    def save(self, *args, **kwargs):
        if not self.end_time:
            self.end_time = (datetime.combine(self.date, self.time) + timedelta(minutes=10)).time()
        super().save(*args, **kwargs)

    def __str__(self):
        return f"{self.get_appointment_type_display()} for {self.patient} on {self.date} at {self.time}"

    @classmethod
    def get_booking_status(cls):
        today = timezone.now().date()
        last_week_start = today - timedelta(days=today.weekday() + 7)
        last_week_end = last_week_start + timedelta(days=6)
        this_week_start = today - timedelta(days=today.weekday())
        this_week_end = this_week_start + timedelta(days=6)
        next_week_start = this_week_end + timedelta(days=1)
        next_week_end = next_week_start + timedelta(days=6)

        last_week_appointments = cls.objects.filter(date__range=[last_week_start, last_week_end]).count()
        this_week_appointments = cls.objects.filter(date__range=[this_week_start, this_week_end]).count()
        next_week_appointments = cls.objects.filter(date__range=[next_week_start, next_week_end]).count()

        total_slots = 5 * 8 * 6  # 5 days, 8 hours per day, 6 slots per hour

        last_week_percentage = min(last_week_appointments / total_slots * 100, 100)
        this_week_percentage = min(this_week_appointments / total_slots * 100, 100)
        next_week_percentage = min(next_week_appointments / total_slots * 100, 100)

        return {
            'last_week': last_week_percentage,
            'this_week': this_week_percentage,
            'next_week': next_week_percentage
        }

    @classmethod
    def is_fully_booked(cls, date):
        week_start = date - timedelta(days=date.weekday())
        week_end = week_start + timedelta(days=6)
        week_appointments = cls.objects.filter(date__range=[week_start, week_end]).count()
        total_slots = 5 * 8 * 6  # 5 days, 8 hours per day, 6 slots per hour
        return week_appointments >= total_slots
        
class Prescription(models.Model):
    patient = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE)
    doctor = models.ForeignKey(settings.AUTH_USER_MODEL, related_name='prescriptions', on_delete=models.CASCADE)
    appointment = models.ForeignKey(Appointment, related_name='prescriptions', on_delete=models.CASCADE)  # Added this line
    medication = models.CharField(max_length=255)
    dosage = models.CharField(max_length=255)
    instructions = models.TextField()
    date_prescribed = models.DateTimeField(auto_now_add=True)
    is_repeatable = models.BooleanField(default=False)

    def __str__(self):
        return f'{self.medication} prescribed to {self.patient.get_full_name()} by {self.doctor.get_full_name()}'

class PrescriptionRequest(models.Model):
    STATUS_CHOICES = [
        ('PENDING', 'Pending'),
        ('APPROVED', 'Approved'),
        ('REJECTED', 'Rejected'),
    ]
    patient = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE, related_name='prescription_requests')
    prescription = models.ForeignKey(Prescription, on_delete=models.CASCADE)
    request_date = models.DateTimeField(auto_now_add=True)
    status = models.CharField(max_length=10, choices=STATUS_CHOICES, default='PENDING')
    notes = models.TextField(blank=True, null=True)

    def __str__(self):
        return f"Prescription request for {self.patient.username} - {self.prescription.medication}"

class Fee(models.Model):
    PATIENT_TYPE_CHOICES = [
        ('ALL', 'All Patients'),
        ('NHS', 'NHS Patients'),
        ('PRIVATE', 'Private Patients'),
    ]
    title = models.CharField(max_length=100)
    amount = models.DecimalField(max_digits=10, decimal_places=2)
    patient_type = models.CharField(max_length=10, choices=PATIENT_TYPE_CHOICES, default='ALL')

    def __str__(self):
        return f"{self.title} - £{self.amount} ({self.get_patient_type_display()})"

    class Meta:
        verbose_name_plural = "Fees"

class DefaultRate(models.Model):
    RATE_TYPES = [
        ('NHS_PATIENT', 'NHS Patient'),
        ('PRIVATE_PATIENT', 'Private Patient'),
        ('DOCTOR', 'Doctor'),
        ('NURSE', 'Nurse'),
    ]
    rate_type = models.CharField(max_length=20, choices=RATE_TYPES, unique=True)
    amount = models.DecimalField(max_digits=6, decimal_places=2)
    
    def __str__(self):
        return f"{self.get_rate_type_display()} Default Rate: £{self.amount}"
    
class Rate(models.Model):
    RATE_TYPES = [
        ('NHS_PATIENT', 'NHS Patient'),
        ('PRIVATE_PATIENT', 'Private Patient'),
        ('DOCTOR', 'Doctor'),
        ('NURSE', 'Nurse'),
    ]
    rate_type = models.CharField(max_length=20, choices=RATE_TYPES, unique=True)
    amount = models.DecimalField(max_digits=6, decimal_places=2)
    
    def __str__(self):
        return f"{self.get_rate_type_display()} Rate: £{self.amount}"

class Invoice(models.Model):
    PATIENT_TYPE_CHOICES = [
        ('NHS', 'NHS'),
        ('PRIVATE', 'Private'),
    ]
    PAYMENT_STATUS_CHOICES = [
        ('PENDING', 'Pending'),
        ('PAID', 'Paid'),
        ('SENT_TO_NHS', 'Sent to NHS'),
    ]

    patient = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE, related_name='invoices')
    appointment = models.OneToOneField('Appointment', on_delete=models.CASCADE, unique=True)
    patient_type = models.CharField(max_length=7, choices=PATIENT_TYPE_CHOICES)
    consultation_length = models.PositiveIntegerField(help_text="Length of consultation in minutes")
    rate = models.DecimalField(max_digits=6, decimal_places=2, help_text="Rate per 10 minutes")
    total_amount = models.DecimalField(max_digits=10, decimal_places=2)
    payment_status = models.CharField(max_length=15, choices=PAYMENT_STATUS_CHOICES, default='PENDING')
    date_issued = models.DateTimeField(default=timezone.now)
    date_paid = models.DateTimeField(null=True, blank=True)
    fees = models.ManyToManyField('Fee', related_name='invoices')

    def calculate_total(self):
        base_amount = Decimal(self.consultation_length) / Decimal('10') * self.rate
        fee_amount = sum(fee.amount for fee in self.fees.all())
        return base_amount + fee_amount

    def save(self, *args, **kwargs):
        if not self.pk:  # If this is a new invoice
            super().save(*args, **kwargs)  # Save first to create the pk
            self.total_amount = self.calculate_total()
            self.save(update_fields=['total_amount'])  # Save again to update the total_amount
        else:
            super().save(*args, **kwargs)

    def __str__(self):
        return f"Invoice {self.id} for {self.patient.username} - {self.get_patient_type_display()} - Total: £{self.total_amount}"


class CompletedForwardedCanceled(models.Model):
    appointment = models.OneToOneField(Appointment, on_delete=models.CASCADE)
    date_changed = models.DateTimeField(default=timezone.now)
    reason = models.TextField(blank=True, null=True)
    changed_by = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.SET_NULL, null=True)
    
    def __str__(self):
        return f"CFC: {self.appointment} - {self.appointment.get_status_display()}"


================================================================================

File: E:\SmartCare-Surgery-System\appointments\tests.py
from django.test import TestCase, Client
from django.urls import reverse
from django.contrib.auth import get_user_model
from .models import Appointment, Prescription
from datetime import datetime, timedelta
from django.utils import timezone

User = get_user_model()

class AppointmentTestCase(TestCase):
    def setUp(self):
        self.client = Client()
        self.patient = User.objects.create_user(username='patient', password='testpass123', user_type='patient')
        self.doctor = User.objects.create_user(username='doctor', password='testpass123', user_type='doctor')
        self.nurse = User.objects.create_user(username='nurse', password='testpass123', user_type='nurse')
        
        self.appointment = Appointment.objects.create(
            patient=self.patient,
            doctor=self.doctor,
            date=timezone.now().date() + timedelta(days=1),
            time='10:00',
            reason='Test appointment'
        )

    def test_book_appointment(self):
        self.client.login(username='patient', password='testpass123')
        response = self.client.post(reverse('book_appointment'), {
            'doctor_or_nurse': 'doctor',
            'staff': self.doctor.id,
            'date': (timezone.now().date() + timedelta(days=1)).strftime('%Y-%m-%d'),
            'time': '14:00',
            'reason': 'New test appointment'
        })
        self.assertRedirects(response, reverse('view_appointments'))
        self.assertEqual(Appointment.objects.count(), 2)

    def test_view_appointments(self):
        self.client.login(username='patient', password='testpass123')
        response = self.client.get(reverse('view_appointments'))
        self.assertEqual(response.status_code, 200)
        self.assertContains(response, 'Test appointment')

    def test_cancel_appointment(self):
        self.client.login(username='patient', password='testpass123')
        response = self.client.post(reverse('cancel_appointment', args=[self.appointment.id]))
        self.assertRedirects(response, reverse('view_appointments'))
        self.assertEqual(Appointment.objects.count(), 0)

    def test_reschedule_appointment(self):
        self.client.login(username='doctor', password='testpass123')
        new_date = timezone.now().date() + timedelta(days=3)
        response = self.client.post(reverse('reschedule_appointment', args=[self.appointment.id]), {
            'doctor_or_nurse': 'doctor',
            'staff': self.doctor.id,
            'date': new_date.strftime('%Y-%m-%d'),
            'time': '15:00',
            'reason': 'Rescheduled appointment'
        })
        self.assertRedirects(response, reverse('view_appointments'))
        self.appointment.refresh_from_db()
        self.assertEqual(self.appointment.date, new_date)
        self.assertEqual(self.appointment.time.strftime('%H:%M'), '15:00')

    def test_complete_appointment(self):
        self.client.login(username='doctor', password='testpass123')
        response = self.client.post(reverse('complete_appointment', args=[self.appointment.id]))
        self.assertRedirects(response, reverse('view_appointments'))
        self.appointment.refresh_from_db()
        self.assertTrue(self.appointment.is_completed)

    def test_appointment_detail(self):
        self.client.login(username='patient', password='testpass123')
        response = self.client.get(reverse('appointment_detail', args=[self.appointment.id]))
        self.assertEqual(response.status_code, 200)
        self.assertContains(response, 'Test appointment')

    def test_issue_prescription(self):
        self.client.login(username='doctor', password='testpass123')
        response = self.client.post(reverse('issue_prescription', args=[self.appointment.id]), {
            'medication': 'Test Med',
            'dosage': '1 pill daily',
            'instructions': 'Take with food'
        })
        print('Response status code:', response.status_code)
        print('Response URL:', response.url)
        self.assertRedirects(response, reverse('appointment_detail', args=[self.appointment.id]))
        self.assertEqual(Prescription.objects.count(), 1)
        prescription = Prescription.objects.first()
        self.assertEqual(prescription.medication, 'Test Med')
        self.assertEqual(prescription.dosage, '1 pill daily')
        self.assertEqual(prescription.instructions, 'Take with food')

    def test_load_staff(self):
        response = self.client.get(reverse('ajax_load_staff'), {'doctor_or_nurse': 'doctor'})
        self.assertEqual(response.status_code, 200)
        self.assertContains(response, self.doctor.username)
        self.assertTemplateUsed(response, 'appointments/staff_dropdown_list_options.html')

    def test_get_available_slots(self):
        self.client.login(username='doctor', password='testpass123')
        response = self.client.get(reverse('get_available_slots'), {'date': '2024-07-01', 'doctor_id': self.doctor.id})
        self.assertEqual(response.status_code, 200)
        self.assertIn('09:00', response.json())

    def test_unauthorized_access(self):
        self.client.login(username='patient', password='testpass123')
        response = self.client.get(reverse('complete_appointment', args=[self.appointment.id]))
        self.assertRedirects(response, reverse('unauthorized_access'))

        self.client.login(username='nurse', password='testpass123')
        response = self.client.get(reverse('issue_prescription', args=[self.appointment.id]))
        self.assertRedirects(response, reverse('unauthorized_access'))

    def test_appointment_conflict(self):
        self.client.login(username='patient', password='testpass123')
        response = self.client.post(reverse('book_appointment'), {
            'doctor_or_nurse': 'doctor',
            'staff': self.doctor.id,
            'date': self.appointment.date,
            'time': self.appointment.time,
            'reason': 'Conflicting appointment'
        })
        self.assertEqual(response.status_code, 200)
        self.assertContains(response, 'This time slot is already booked')

    def test_past_date_appointment(self):
        self.client.login(username='patient', password='testpass123')
        past_date = timezone.now().date() - timedelta(days=1)
        response = self.client.post(reverse('book_appointment'), {
            'doctor_or_nurse': 'doctor',
            'staff': self.doctor.id,
            'date': past_date.strftime('%Y-%m-%d'),
            'time': '14:00',
            'reason': 'Past appointment'
        })
        self.assertEqual(response.status_code, 200)
        self.assertContains(response, 'Appointment date cannot be in the past')


================================================================================

File: E:\SmartCare-Surgery-System\appointments\urls.py
from django.urls import path
from .views import view_prescriptions, request_prescription
from . import views

urlpatterns = [
    path('debug-fees/', views.debug_fees, name='debug_fees'),
    path('delete-fee/<int:fee_id>/', views.delete_fee, name='delete_fee'),
    path('prescriptions/request/<int:prescription_id>/', request_prescription, name='request_prescription'),
    path('book/', views.book_appointment, name='book_appointment'),
    path('reschedule/<int:appointment_id>/', views.reschedule_appointment, name='reschedule_appointment'),
    path('view/', views.view_appointments, name='view_appointments'),
    path('cancel/<int:appointment_id>/', views.cancel_appointment, name='cancel_appointment'),
    path('detail/<int:appointment_id>/', views.appointment_detail, name='appointment_detail'),
    path('complete/<int:appointment_id>/', views.complete_appointment, name='complete_appointment'),
    path('issue-prescription/<int:appointment_id>/', views.issue_prescription, name='issue_prescription'),
    path('prescriptions/', views.view_prescriptions, name='view_prescriptions'),
    path('prescription/<int:prescription_id>/', views.prescription_detail, name='prescription_detail'),
    path('generate-invoice/<int:appointment_id>/', views.generate_invoice, name='generate_invoice'),
    path('view-edit-invoice/<int:invoice_id>/', views.view_edit_invoice, name='view_edit_invoice'),
    path('invoices/', views.list_invoices, name='list_invoices'),
    path('patient-invoices/', views.patient_invoices, name='patient_invoices'),
    path('list/', views.view_appointments, name='list_appointments'),
    path('admin-invoices/', views.admin_invoices, name='admin_invoices'),
    path('cfc-appointments/', views.view_cfc_appointments, name='view_cfc_appointments'),
    path('financial_reports/', views.financial_reports, name='financial_reports'),
    path('ajax/load-staff/', views.load_staff, name='load_staff'),
    path('ajax/get-available-slots/', views.get_available_slots, name='get_available_slots'),
    path('oauth2callback/', views.oauth2callback, name='oauth2callback'),
]


================================================================================

File: E:\SmartCare-Surgery-System\appointments\views.py
from django.shortcuts import render, redirect, get_object_or_404
from django.contrib.auth.decorators import login_required
from django.contrib import messages
from django.http import JsonResponse
from django.db import connection, transaction
from django.core.exceptions import ObjectDoesNotExist, PermissionDenied
from .models import Rate, DefaultRate
from .forms import InvoiceStatusForm, RateForm
from smartcare import settings
from .calendar_service import create_flow, get_calendar_service
from .forms import (AppointmentForm, PrescriptionForm, InvoiceForm, PrescriptionRequestForm,
                    FeeForm, DoctorSpecialtyFilterForm, AppointmentTypeFilterForm, DateRangeFilterForm,
                    RateSettingForm)
from .models import (Appointment, Prescription, Invoice, CompletedForwardedCanceled,
                     PrescriptionRequest, Fee, User)
from authentication.decorators import user_is_patient, user_is_doctor, user_is_nurse, user_is_admin
from django.utils import timezone
from google.auth.exceptions import RefreshError
from django.db.models import Sum
from decimal import Decimal
from datetime import datetime, timedelta
import logging
from .forms import DoctorSpecialtyFilterForm

logger = logging.getLogger(__name__)

@login_required
def book_appointment(request):
    if request.method == 'POST':
        form = AppointmentForm(request.POST)
        if form.is_valid():
            appointment_date = form.cleaned_data['date']
            if Appointment.is_fully_booked(appointment_date):
                messages.error(request, "We are fully booked for this week. Please choose a different week.")
                return redirect('book_appointment')
            
            appointment = form.save(commit=False)
            appointment.patient = request.user
            doctor_or_nurse = form.cleaned_data['doctor_or_nurse']
            staff = form.cleaned_data['staff']
            if doctor_or_nurse == 'doctor':
                appointment.doctor = staff
                appointment.nurse = None
            else:
                appointment.nurse = staff
                appointment.doctor = None
            appointment.save()
            messages.success(request, 'Appointment booked successfully.')
            return redirect('view_appointments')
        else:
            messages.error(request, 'There was an error booking your appointment. Please check the form.')
    else:
        form = AppointmentForm()
    
    booking_status = Appointment.get_booking_status()
    context = {
        'form': form,
        'booking_status': booking_status,
    }
    return render(request, 'appointments/book_appointment.html', context)


@login_required
def reschedule_appointment(request, appointment_id):
    appointment = get_object_or_404(Appointment, id=appointment_id)
    if request.method == 'POST':
        form = AppointmentForm(request.POST, instance=appointment)
        if form.is_valid():
            updated_appointment = form.save(commit=False)
            doctor_or_nurse = form.cleaned_data['doctor_or_nurse']
            staff = form.cleaned_data['staff']
            if doctor_or_nurse == 'doctor':
                updated_appointment.doctor = staff
                updated_appointment.nurse = None
            else:
                updated_appointment.nurse = staff
                updated_appointment.doctor = None
            updated_appointment.save()
            messages.success(request, 'Appointment rescheduled/forwarded successfully.')
            return redirect('view_appointments')
        else:
            messages.error(request, 'There was an error rescheduling/forwarding your appointment. Please check the form.')
    else:
        initial_data = {
            'doctor_or_nurse': 'doctor' if appointment.doctor else 'nurse',
            'staff': appointment.doctor.id if appointment.doctor else appointment.nurse.id,
            'specialty': appointment.doctor.specialty if appointment.doctor else None,
        }
        form = AppointmentForm(instance=appointment, initial=initial_data)
    
    context = {
        'form': form,
        'appointment': appointment,
    }
    return render(request, 'appointments/reschedule_appointment.html', context)


@login_required
def cancel_appointment(request, appointment_id):
    appointment = get_object_or_404(Appointment, id=appointment_id)
    
    if appointment.status != 'SCHEDULED':
        messages.error(request, "This appointment cannot be cancelled as it's not in a scheduled state.")
        return redirect('view_appointments')

    if not (request.user == appointment.patient or 
            request.user == appointment.doctor or 
            request.user == appointment.nurse or 
            request.user.is_staff):
        messages.error(request, "You don't have permission to cancel this appointment.")
        return redirect('view_appointments')

    if request.method == 'POST':
        cancellation_reason = request.POST.get('cancellation_reason', '')
        appointment.update_status('CANCELED')
        CompletedForwardedCanceled.objects.create(
            appointment=appointment,
            changed_by=request.user,
            reason=cancellation_reason
        )
        messages.success(request, 'Appointment cancelled successfully.')
        return redirect('view_appointments')
    
    return render(request, 'appointments/cancel_appointment.html', {'appointment': appointment})


@login_required
def complete_appointment(request, appointment_id):
    appointment = get_object_or_404(Appointment, id=appointment_id)
    if request.method == 'POST':
        if appointment.status != 'SCHEDULED':
            messages.error(request, "This appointment cannot be completed as it's not in a scheduled state.")
            return redirect('view_appointments')
        
        appointment.update_status('COMPLETED')
        
        CompletedForwardedCanceled.objects.create(
            appointment=appointment,
            changed_by=request.user,
            reason="Appointment completed"
        )
        
        return redirect('generate_invoice', appointment_id=appointment.id)
    return render(request, 'appointments/complete_appointment.html', {'appointment': appointment})


@login_required
def view_appointments(request):
    filter_form = AppointmentTypeFilterForm(request.GET)
    appointments = Appointment.objects.filter(status='SCHEDULED')

    if request.user.is_patient():
        appointments = appointments.filter(patient=request.user)
    elif request.user.is_doctor():
        appointments = appointments.filter(doctor=request.user)
    elif request.user.is_nurse():
        appointments = appointments.filter(nurse=request.user)

    if filter_form.is_valid() and filter_form.cleaned_data['appointment_type']:
        appointments = appointments.filter(appointment_type=filter_form.cleaned_data['appointment_type'])

    context = {
        'appointments': appointments,
        'filter_form': filter_form
    }
    return render(request, 'appointments/view_appointments.html', context)

@login_required
def view_cfc_appointments(request):
    cfc_appointments = Appointment.objects.exclude(status='SCHEDULED')
    
    if request.user.is_patient():
        cfc_appointments = cfc_appointments.filter(patient=request.user)
    elif request.user.is_doctor():
        cfc_appointments = cfc_appointments.filter(doctor=request.user)
    elif request.user.is_nurse():
        cfc_appointments = cfc_appointments.filter(nurse=request.user)
    
    cfc_appointments = cfc_appointments.order_by('-date', '-time')
    return render(request, 'appointments/cfc.html', {'cfc_appointments': cfc_appointments})

@login_required
def appointment_detail(request, appointment_id):
    appointment = get_object_or_404(Appointment, id=appointment_id)
    
    if request.user.is_patient():
        if appointment.patient != request.user:
            raise PermissionDenied
    elif request.user.is_doctor():
        if appointment.doctor != request.user:
            raise PermissionDenied
    elif request.user.is_nurse():
        if appointment.nurse != request.user:
            raise PermissionDenied
    elif not request.user.is_admin():
        raise PermissionDenied
    
    prescriptions = appointment.prescriptions.all()
    
    context = {
        'appointment': appointment,
        'prescriptions': prescriptions,
        'doctor': appointment.doctor,
        'nurse': appointment.nurse,
        'patient': appointment.patient,
        'raw_status': appointment.status,
    }
    
    return render(request, 'appointments/appointment_detail.html', context)


@login_required
def issue_prescription(request, appointment_id):
    appointment = get_object_or_404(Appointment, id=appointment_id)
    if request.method == 'POST':
        form = PrescriptionForm(request.POST)
        if form.is_valid():
            prescription = form.save(commit=False)
            prescription.patient = appointment.patient
            prescription.doctor = request.user
            prescription.appointment = appointment
            prescription.save()
            return redirect('appointment_detail', appointment_id=appointment.id)
    else:
        form = PrescriptionForm()
    return render(request, 'appointments/issue_prescription.html', {'form': form, 'appointment': appointment})

@login_required
def view_prescriptions(request):
    if request.user.is_patient():
        prescriptions = Prescription.objects.filter(patient=request.user)
        return render(request, 'appointments/view_prescriptions.html', {'prescriptions': prescriptions})

    elif request.user.is_doctor() or request.user.is_nurse():
        if request.method == 'POST':
            request_id = request.POST.get('request_id')
            if request_id:
                prescription_request = get_object_or_404(PrescriptionRequest, id=request_id)
                status = request.POST.get('status')
                prescription_request.status = status
                prescription_request.save()
                
                if status == 'APPROVED':
                    prescription = prescription_request.prescription
                    prescription.date_prescribed = timezone.now()
                    prescription.is_repeatable = True  
                    prescription.save()
                    
                    PrescriptionRequest.objects.filter(id=request_id).delete()
                    
                messages.success(request, f'Prescription request {status.lower()}.')
                return redirect('view_prescriptions')

        prescription_requests = PrescriptionRequest.objects.filter(prescription__doctor=request.user)
        return render(request, 'appointments/view_prescriptions.html', {'prescription_requests': prescription_requests})
    else:
        return redirect('home')


@login_required
def prescription_detail(request, prescription_id):
    prescription = get_object_or_404(Prescription, id=prescription_id)
    if request.user != prescription.patient and request.user != prescription.doctor:
        return redirect('unauthorized_access')
    return render(request, 'appointments/prescription_detail.html', {'prescription': prescription})

@login_required
@user_is_patient
def request_prescription(request, prescription_id):
    prescription = get_object_or_404(Prescription, id=prescription_id, patient=request.user)
    if request.method == 'POST':
        form = PrescriptionRequestForm(request.POST)
        if form.is_valid():
            prescription_request = form.save(commit=False)
            prescription_request.patient = request.user
            prescription_request.prescription = prescription
            prescription_request.save()
            messages.success(request, 'Prescription request submitted successfully.')
            return redirect('view_prescriptions')
    else:
        form = PrescriptionRequestForm()
    return render(request, 'appointments/request_prescription.html', {'form': form, 'prescription': prescription})


from datetime import datetime

@login_required
@transaction.atomic
def generate_invoice(request, appointment_id):
    appointment = get_object_or_404(Appointment, id=appointment_id)
    
    if request.method == 'POST':
        patient_type = appointment.patient.patient_type if hasattr(appointment.patient, 'patient_type') else 'NHS'
        
        consultation_length = (appointment.end_time.hour * 60 + appointment.end_time.minute) - (appointment.time.hour * 60 + appointment.time.minute)
        
        if appointment.doctor:
            rate = get_default_doctor_rate()
        elif appointment.nurse:
            rate = get_default_nurse_rate()
        else:
            rate = get_default_rate_for_patient_type(patient_type)
        
        base_amount = Decimal(consultation_length) / Decimal('10') * rate
        
        applicable_fees = Fee.objects.filter(patient_type__in=['ALL', patient_type])
        fee_amount = sum(fee.amount for fee in applicable_fees)
        
        total_amount = base_amount + fee_amount
        
        invoice = Invoice.objects.create(
            patient=appointment.patient,
            appointment=appointment,
            patient_type=patient_type,
            consultation_length=consultation_length,
            rate=rate,
            total_amount=total_amount  # Set initial total amount
        )
        
        invoice.fees.set(applicable_fees)
        
        # Recalculate and update total amount after fees are set
        invoice.total_amount = invoice.calculate_total()
        invoice.save(update_fields=['total_amount'])
        
        print(f"Invoice generated: ID={invoice.id}, Base amount={base_amount}, Fee amount={fee_amount}, Total amount={invoice.total_amount}")
        
        appointment.update_status('COMPLETED')
        
        CompletedForwardedCanceled.objects.create(
            appointment=appointment,
            changed_by=request.user,
            reason="Invoice generated and appointment completed"
        )
        
        messages.success(request, 'Invoice generated successfully and appointment marked as completed.')
        if request.user.is_admin():
            return redirect('list_invoices')
        elif request.user.is_doctor() or request.user.is_nurse():
            return redirect('view_edit_invoice', invoice_id=invoice.id)
    
    context = {
        'appointment': appointment,
    }
    return render(request, 'appointments/generate_invoice.html', context)


@login_required
def view_edit_invoice(request, invoice_id):
    invoice = get_object_or_404(Invoice, id=invoice_id)
    
    # Permission checks
    if request.user.is_patient():
        if invoice.patient != request.user:
            raise PermissionDenied
    elif request.user.is_doctor():
        if invoice.appointment.doctor != request.user:
            raise PermissionDenied
    elif request.user.is_nurse():
        if invoice.appointment.nurse != request.user:
            raise PermissionDenied
    elif not request.user.is_admin():
        raise PermissionDenied
    
    can_edit = request.user.is_admin() or request.user.is_doctor() or request.user.is_nurse()
    
    if request.method == 'POST' and can_edit:
        if request.user.is_admin():
            form = InvoiceForm(request.POST, instance=invoice)
        else:
            form = InvoiceStatusForm(request.POST, instance=invoice)
        
        if form.is_valid():
            updated_invoice = form.save(commit=False)
            if updated_invoice.payment_status == 'PAID' and invoice.payment_status != 'PAID':
                updated_invoice.date_paid = timezone.now()
            
            # Recalculate total amount
            updated_invoice.total_amount = updated_invoice.calculate_total()
            
            updated_invoice.save()
            messages.success(request, 'Invoice updated successfully.')
            return redirect('view_edit_invoice', invoice_id=invoice.id)
    else:
        if request.user.is_admin():
            form = InvoiceForm(instance=invoice)
        else:
            form = InvoiceStatusForm(instance=invoice)
    
    applied_fees = invoice.fees.all()
    print(f"Applied fees for invoice {invoice.id}: {list(applied_fees)}")  # Debug print
    
    context = {
        'invoice': invoice,
        'form': form,
        'can_edit': can_edit,
        'issued_by': invoice.appointment.doctor.get_full_name() if invoice.appointment.doctor else invoice.appointment.nurse.get_full_name(),
        'staff_name': invoice.appointment.doctor.get_full_name() if invoice.appointment.doctor else invoice.appointment.nurse.get_full_name(),
        'appointment_type': invoice.appointment.get_appointment_type_display(),
        'applied_fees': applied_fees,
    }
    return render(request, 'appointments/view_edit_invoice.html', context)

from django.http import HttpResponse

def debug_fees(request):
    fees = Fee.objects.all()
    response = "Existing Fees:\n"
    for fee in fees:
        response += f"- {fee.title}: £{fee.amount} ({fee.get_patient_type_display()})\n"
    return HttpResponse(response, content_type="text/plain")

@login_required
def list_invoices(request):
    if request.user.is_admin():
        invoices = Invoice.objects.all()
    elif request.user.is_doctor():
        invoices = Invoice.objects.filter(appointment__doctor=request.user)
    elif request.user.is_nurse():
        invoices = Invoice.objects.filter(appointment__nurse=request.user)
    else:
        invoices = Invoice.objects.none()
    
    return render(request, 'appointments/list_invoices.html', {'invoices': invoices})

@login_required
@user_is_patient
def patient_invoices(request):
    invoices = Invoice.objects.filter(patient=request.user)
    return render(request, 'appointments/patient_invoices.html', {'invoices': invoices})

@login_required
@user_is_admin
def admin_invoices(request):
    fee_form = FeeForm()
    rate_form = RateForm()
    date_range_form = DateRangeFilterForm()

    if request.method == 'POST':
        if 'fee_form' in request.POST:
            fee_form = FeeForm(request.POST)
            if fee_form.is_valid():
                fee = fee_form.save()
                print(f"Fee created: {fee}")  # Debug print
                messages.success(request, 'Fee added successfully.')
                return redirect('admin_invoices')
            else:
                print(f"Fee form errors: {fee_form.errors}")

        elif 'rate_form' in request.POST:
            rate_form = RateForm(request.POST)
            if rate_form.is_valid():
                rate_type = rate_form.cleaned_data['rate_type']
                amount = rate_form.cleaned_data['amount']
                Rate.objects.update_or_create(
                    rate_type=rate_type,
                    defaults={'amount': amount}
                )
                messages.success(request, f'{rate_type} rate updated successfully.')
                return redirect('admin_invoices')
        elif 'date_range_form' in request.POST:
            date_range_form = DateRangeFilterForm(request.POST)
            if date_range_form.is_valid():
                start_date = date_range_form.cleaned_data['start_date']
                end_date = date_range_form.cleaned_data['end_date']
                invoices = Invoice.objects.filter(date_issued__range=[start_date, end_date])
            else:
                invoices = Invoice.objects.all()
        else:
            invoices = Invoice.objects.all()
    else:
        fee_form = FeeForm()
        rate_form = RateForm()
        date_range_form = DateRangeFilterForm()
        invoices = Invoice.objects.all()

    start_date = date_range_form.cleaned_data.get('start_date') if date_range_form.is_valid() else timezone.now().date() - timedelta(days=30)
    end_date = date_range_form.cleaned_data.get('end_date') if date_range_form.is_valid() else timezone.now().date()

    invoices = Invoice.objects.filter(date_issued__range=[start_date, end_date])
    nhs_charges = invoices.filter(patient_type='NHS').aggregate(total=Sum('total_amount'))['total'] or 0
    private_payments = invoices.filter(patient_type='PRIVATE', payment_status='PAID').aggregate(total=Sum('total_amount'))['total'] or 0
    total_turnover = invoices.aggregate(total=Sum('total_amount'))['total'] or 0

    context = {
        'fee_form': fee_form,
        'rate_form': rate_form,
        'date_range_form': date_range_form,
        'fees': Fee.objects.all(),
        'rates': Rate.objects.all(),
        'invoices': invoices,
        'nhs_charges': nhs_charges,
        'private_payments': private_payments,
        'total_turnover': total_turnover,
        'start_date': start_date,
        'end_date': end_date,
    }
    return render(request, 'appointments/admin_invoices.html', context)

@login_required
@user_is_admin
def delete_fee(request, fee_id):
    fee = get_object_or_404(Fee, id=fee_id)
    fee.delete()
    messages.success(request, 'Fee deleted successfully.')
    return redirect('admin_invoices')

@login_required
@user_is_admin
def financial_reports(request):
    date_range_form = DateRangeFilterForm(request.GET)
    start_date = date_range_form.cleaned_data.get('start_date') if date_range_form.is_valid() else timezone.now().date() - timedelta(days=30)
    end_date = date_range_form.cleaned_data.get('end_date') if date_range_form.is_valid() else timezone.now().date()

    invoices = Invoice.objects.filter(date_issued__range=[start_date, end_date])
    daily_turnover = invoices.values('date_issued__date').annotate(total=Sum('total_amount'))
    weekly_turnover = invoices.values('date_issued__week').annotate(total=Sum('total_amount'))
    monthly_turnover = invoices.values('date_issued__month').annotate(total=Sum('total_amount'))
    nhs_charges = invoices.filter(patient_type='NHS').aggregate(total=Sum('total_amount'))['total'] or 0
    private_payments = invoices.filter(patient_type='PRIVATE', payment_status='PAID').aggregate(total=Sum('total_amount'))['total'] or 0
    total_turnover = invoices.aggregate(total=Sum('total_amount'))['total'] or 0

    context = {
        'daily_turnover': daily_turnover,
        'weekly_turnover': weekly_turnover,
        'monthly_turnover': monthly_turnover,
        'nhs_charges': nhs_charges,
        'private_payments': private_payments,
        'total_turnover': total_turnover,
        'date_range_form': date_range_form,
        'start_date': start_date,
        'end_date': end_date,
    }
    return render(request, 'appointments/financial_reports.html', context)

@login_required
def load_staff(request):
    doctor_or_nurse = request.GET.get('doctor_or_nurse')
    specialty = request.GET.get('specialty')
    
    if doctor_or_nurse == 'doctor':
        staff = User.objects.filter(user_type='doctor')
        if specialty:
            staff = staff.filter(specialty=specialty)
    else:
        staff = User.objects.filter(user_type='nurse')
    
    staff_list = [{'id': s.id, 'name': s.get_full_name()} for s in staff]
    return JsonResponse(staff_list, safe=False)

@login_required
def get_available_slots(request):
    date = request.GET.get('date')
    staff_id = request.GET.get('staff_id')
    doctor_or_nurse = request.GET.get('doctor_or_nurse')

    available_slots = ["08:00", "08:10", "08:20", "08:30", "08:40", "08:50", "09:00", "09:10"]

    booked_appointments = Appointment.objects.filter(date=date, **{doctor_or_nurse: staff_id}).values_list('time', flat=True)
    available_slots = [slot for slot in available_slots if slot not in booked_appointments]

    return JsonResponse(available_slots, safe=False)

def oauth2callback(request):
    flow = create_flow(request)
    flow.fetch_token(code=request.GET.get('code'))
    credentials = flow.credentials
    request.session['credentials'] = {
        'token': credentials.token,
        'refresh_token': credentials.refresh_token,
        'token_uri': credentials.token_uri,
        'client_id': credentials.client_id,
        'client_secret': credentials.client_secret,
        'scopes': credentials.scopes
    }
    return redirect('book_appointment')

def get_rate_for_patient_type(patient_type):
    try:
        if patient_type == 'NHS':
            return Rate.objects.get(rate_type='NHS_PATIENT').amount
        elif patient_type == 'PRIVATE':
            return Rate.objects.get(rate_type='PRIVATE_PATIENT').amount
        else:
            raise ValueError(f"Invalid patient type: {patient_type}")
    except ObjectDoesNotExist:
        raise ValueError(f"Rate not set for patient type: {patient_type}")

def get_doctor_rate():
    try:
        return Rate.objects.get(rate_type='DOCTOR').amount
    except ObjectDoesNotExist:
        raise ValueError("Doctor rate not set")

def get_nurse_rate():
    try:
        return Rate.objects.get(rate_type='NURSE').amount
    except ObjectDoesNotExist:
        raise ValueError("Nurse rate not set")
    
def get_default_doctor_rate():
    try:
        return DefaultRate.objects.get(rate_type='DOCTOR').amount
    except DefaultRate.DoesNotExist:
        return Decimal('20.00')

def get_default_nurse_rate():
    try:
        return DefaultRate.objects.get(rate_type='NURSE').amount
    except DefaultRate.DoesNotExist:
        return Decimal('10.00')

def get_default_rate_for_patient_type(patient_type):
    rate_type = 'NHS_PATIENT' if patient_type == 'NHS' else 'PRIVATE_PATIENT'
    try:
        return DefaultRate.objects.get(rate_type=rate_type).amount
    except DefaultRate.DoesNotExist:
        return Decimal('00.00') if patient_type == 'NHS' else Decimal('00.00')

================================================================================

File: E:\SmartCare-Surgery-System\authentication\admin.py
from django.contrib import admin
from .models import User

admin.site.register(User)


================================================================================

File: E:\SmartCare-Surgery-System\authentication\apps.py
from django.apps import AppConfig


class AuthenticationConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'authentication'


================================================================================

File: E:\SmartCare-Surgery-System\authentication\decorators.py
from django.shortcuts import redirect
from functools import wraps
from django.contrib.auth.decorators import login_required

def user_is_patient(function):
    @wraps(function)
    @login_required
    def wrap(request, *args, **kwargs):
        if request.user.user_type == 'patient':
            return function(request, *args, **kwargs)
        else:
            return redirect('unauthorized_access')
    return wrap

def user_is_doctor(function):
    @wraps(function)
    @login_required
    def wrap(request, *args, **kwargs):
        if request.user.user_type == 'doctor':
            return function(request, *args, **kwargs)
        else:
            return redirect('unauthorized_access')
    return wrap

def user_is_nurse(function):
    @wraps(function)
    @login_required
    def wrap(request, *args, **kwargs):
        if request.user.user_type == 'nurse':
            return function(request, *args, **kwargs)
        else:
            return redirect('unauthorized_access')
    return wrap

def user_is_admin(function):
    @wraps(function)
    @login_required
    def wrap(request, *args, **kwargs):
        if request.user.user_type == 'admin':
            return function(request, *args, **kwargs)
        else:
            return redirect('unauthorized_access')
    return wrap

================================================================================

File: E:\SmartCare-Surgery-System\authentication\forms.py
from django import forms
from django.contrib.auth.forms import UserCreationForm, AuthenticationForm, UserChangeForm
from django.contrib.auth import get_user_model
from django.contrib import messages
from django.shortcuts import redirect, render
from .models import UserProfile, GPDetails, PendingRegistration
from django.contrib.auth import login

User = get_user_model()

class UserRegistrationForm(UserCreationForm):
    user_type = forms.ChoiceField(choices=User.USER_TYPE_CHOICES)
    date_of_birth = forms.DateField(widget=forms.DateInput(attrs={'type': 'date'}))
    specialty = forms.ChoiceField(choices=[('', 'Select Specialty')] + list(User.DOCTOR_SPECIALTIES), required=False)
    patient_type = forms.ChoiceField(choices=User.PATIENT_TYPE_CHOICES, required=False)
    address = forms.CharField(widget=forms.TextInput(attrs={'class': 'form-control address-input'}), required=True)
    latitude = forms.FloatField(widget=forms.HiddenInput(), required=False)
    longitude = forms.FloatField(widget=forms.HiddenInput(), required=False)

    class Meta:
        model = User
        fields = [
            'username', 'first_name', 'last_name', 'email', 'date_of_birth', 
            'password1', 'password2', 'user_type', 'specialty', 'patient_type', 
            'address', 'latitude', 'longitude'
        ]

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        for field in self.fields:
            self.fields[field].widget.attrs.update({'class': 'form-control'})
        
        self.fields['specialty'].widget.attrs.update({'class': 'form-control specialty-field'})
        self.fields['patient_type'].widget.attrs.update({'class': 'form-control patient-type-field'})

    def clean(self):
        cleaned_data = super().clean()
        user_type = cleaned_data.get('user_type')
        specialty = cleaned_data.get('specialty')
        patient_type = cleaned_data.get('patient_type')

        if user_type == 'doctor' and not specialty:
            self.add_error('specialty', 'Specialty is required for doctors.')
        elif user_type == 'patient' and not patient_type:
            self.add_error('patient_type', 'Patient type is required for patients.')

        return cleaned_data

class UserProfileForm(forms.ModelForm):
    first_name = forms.CharField(max_length=30, required=True)
    last_name = forms.CharField(max_length=30, required=True)
    email = forms.EmailField(required=True)
    date_of_birth = forms.DateField(widget=forms.DateInput(attrs={'type': 'date'}))
    address = forms.CharField(widget=forms.TextInput(attrs={'class': 'form-control address-input'}), required=True)
    latitude = forms.FloatField(widget=forms.HiddenInput(), required=False)
    longitude = forms.FloatField(widget=forms.HiddenInput(), required=False)
    specialty = forms.ChoiceField(choices=[('', 'Select Specialty')] + list(User.DOCTOR_SPECIALTIES), required=False)

    class Meta:
        model = UserProfile
        fields = ['address', 'bio', 'latitude', 'longitude', 'specialty']
        widgets = {
            'bio': forms.Textarea(attrs={'class': 'form-control'}),
        }

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        if self.instance and self.instance.user_id:
            self.fields['first_name'].initial = self.instance.user.first_name
            self.fields['last_name'].initial = self.instance.user.last_name
            self.fields['email'].initial = self.instance.user.email
            self.fields['date_of_birth'].initial = self.instance.user.date_of_birth
            self.fields['specialty'].initial = self.instance.user.specialty

        if self.instance and self.instance.user.user_type != 'doctor':
            del self.fields['specialty']

    def save(self, commit=True):
        profile = super().save(commit=False)
        user = profile.user
        user.first_name = self.cleaned_data['first_name']
        user.last_name = self.cleaned_data['last_name']
        user.email = self.cleaned_data['email']
        user.date_of_birth = self.cleaned_data['date_of_birth']
        if 'specialty' in self.cleaned_data:
            user.specialty = self.cleaned_data['specialty']
        if commit:
            user.save()
            profile.save()
        return profile

class UserLoginForm(AuthenticationForm):
    username = forms.CharField(widget=forms.TextInput(attrs={'class': 'form-control'}))
    password = forms.CharField(widget=forms.PasswordInput(attrs={'class': 'form-control'}))


class CustomUserChangeForm(UserChangeForm):
    date_of_birth = forms.DateField(widget=forms.DateInput(attrs={'type': 'date'}))
    patient_type = forms.ChoiceField(choices=User.PATIENT_TYPE_CHOICES, required=False)

    class Meta:
        model = User
        fields = ['username', 'first_name', 'last_name', 'email', 'date_of_birth', 'user_type', 'phone_number', 'address', 'patient_type', 'specialty']

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        if self.instance.user_type != 'patient':
            del self.fields['patient_type']
        if self.instance.user_type != 'doctor':
            del self.fields['specialty']
class GPForm(forms.ModelForm):
    name = forms.CharField(max_length=255, required=True)
    email = forms.EmailField(required=True)
    phone = forms.CharField(max_length=15, required=False)
    address = forms.CharField(max_length=255, required=False, widget=forms.TextInput(attrs={'id': 'address-input'}))
    latitude = forms.FloatField(widget=forms.HiddenInput(), required=False)
    longitude = forms.FloatField(widget=forms.HiddenInput(), required=False)

    class Meta:
        model = GPDetails
        fields = ['name', 'email', 'phone', 'address', 'latitude', 'longitude']

class DoctorSpecialtyFilterForm(forms.Form):
    specialty = forms.ChoiceField(choices=[('', 'All Specialties')] + list(User.DOCTOR_SPECIALTIES), required=False)

class DateRangeFilterForm(forms.Form):
    start_date = forms.DateField(widget=forms.DateInput(attrs={'type': 'date'}), required=False)
    end_date = forms.DateField(widget=forms.DateInput(attrs={'type': 'date'}), required=False)




================================================================================

File: E:\SmartCare-Surgery-System\authentication\models.py
from django.contrib.auth.models import AbstractUser, Group, Permission
from django.db import models
from django.db.models.signals import post_save
from django.dispatch import receiver
from django.conf import settings
from django.contrib.auth.models import AbstractUser, Group, Permission
from django.db import models
from django.db.models.signals import post_save
from django.dispatch import receiver

class User(AbstractUser):
    USER_TYPE_CHOICES = (
        ('patient', 'Patient'),
        ('doctor', 'Doctor'),
        ('nurse', 'Nurse'),
        ('admin', 'Admin'),
    )
    PATIENT_TYPE_CHOICES = (
        ('NHS', 'NHS Patient'),
        ('PRIVATE', 'Private Patient'),
    )
    DOCTOR_SPECIALTIES = (
        ('EYE', 'Eye Specialist'),
        ('GYN', 'Gynecologist'),
        ('ORT', 'Orthopedic'),
        ('PED', 'Pediatrician'),
        ('PSY', 'Psychiatrist'),
        ('RAD', 'Radiologist'),
        ('URO', 'Urologist'),
    )
    user_type = models.CharField(max_length=10, choices=USER_TYPE_CHOICES, default='patient')
    phone_number = models.CharField(max_length=15, blank=True, null=True)
    address = models.TextField(blank=True, null=True)
    date_of_birth = models.DateField(null=True, blank=True)
    patient_type = models.CharField(max_length=7, choices=PATIENT_TYPE_CHOICES, default='NHS')
    specialty = models.CharField(max_length=3, choices=DOCTOR_SPECIALTIES, null=True, blank=True)

    def is_patient(self):
        return self.user_type == 'patient'

    def is_doctor(self):
        return self.user_type == 'doctor'

    def is_nurse(self):
        return self.user_type == 'nurse'

    def is_admin(self):
        return self.user_type == 'admin'

    def get_full_name(self):
        return f"{self.first_name} {self.last_name}"

class UserProfile(models.Model):
    user = models.OneToOneField(settings.AUTH_USER_MODEL, on_delete=models.CASCADE)
    bio = models.TextField(blank=True, null=True)
    address = models.CharField(max_length=255, blank=True, null=True)
    latitude = models.FloatField(blank=True, null=True)
    longitude = models.FloatField(blank=True, null=True)

    def __str__(self):
        return f"Profile for {self.user.username}"


@receiver(post_save, sender=User)
def create_or_update_user_profile(sender, instance, created, **kwargs):
    if created:
        UserProfile.objects.create(user=instance)
    else:
        instance.userprofile.save()

class PendingRegistration(models.Model):
    user = models.OneToOneField(User, on_delete=models.CASCADE)
    created_at = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return f"Pending registration for {self.user.username}"

class GPDetails(models.Model):
    name = models.CharField(max_length=255)
    email = models.EmailField(unique=True)
    phone = models.CharField(max_length=15, blank=True, null=True)
    address = models.CharField(max_length=255, blank=True, null=True)
    latitude = models.FloatField(null=True, blank=True)
    longitude = models.FloatField(null=True, blank=True)

    def __str__(self):
        return f"{self.name} ({self.email})"


================================================================================

File: E:\SmartCare-Surgery-System\authentication\tests.py
from django.test import TestCase, Client
from django.urls import reverse
from django.contrib.auth import get_user_model
from appointments.models import Appointment
from authentication.models import UserProfile
from django.utils import timezone

User = get_user_model()

class AuthenticationTestCase(TestCase):
    def setUp(self):
        self.client = Client()
        self.patient = User.objects.create_user(username='patient', password='testpass123', user_type='patient')
        self.doctor = User.objects.create_user(username='doctor', password='testpass123', user_type='doctor')
        self.nurse = User.objects.create_user(username='nurse', password='testpass123', user_type='nurse')
        self.admin = User.objects.create_user(username='admin', password='testpass123', user_type='admin')

        UserProfile.objects.create(user=self.patient)
        UserProfile.objects.create(user=self.doctor)
        UserProfile.objects.create(user=self.nurse)
        UserProfile.objects.create(user=self.admin)

    def test_user_registration(self):
        response = self.client.post(reverse('register'), {
            'username': 'newuser',
            'password1': 'newpass123',
            'password2': 'newpass123',
            'email': 'newuser@example.com',
            'user_type': 'patient'
        })
        self.assertEqual(response.status_code, 302)  # Redirect after successful registration
        self.assertTrue(User.objects.filter(username='newuser').exists())

    def test_user_login(self):
        response = self.client.post(reverse('login'), {
            'username': 'patient',
            'password': 'testpass123'
        })
        self.assertEqual(response.status_code, 302)  # Redirect after successful login
        self.assertTrue('_auth_user_id' in self.client.session)

    def test_user_logout(self):
        self.client.login(username='patient', password='testpass123')
        response = self.client.get(reverse('logout'))
        self.assertEqual(response.status_code, 302)  # Redirect after logout
        self.assertFalse('_auth_user_id' in self.client.session)

    def test_patient_dashboard_access(self):
        self.client.login(username='patient', password='testpass123')
        response = self.client.get(reverse('patient_dashboard'))
        self.assertEqual(response.status_code, 200)

    def test_doctor_dashboard_access(self):
        self.client.login(username='doctor', password='testpass123')
        response = self.client.get(reverse('doctor_dashboard'))
        self.assertEqual(response.status_code, 200)

    def test_nurse_dashboard_access(self):
        self.client.login(username='nurse', password='testpass123')
        response = self.client.get(reverse('nurse_dashboard'))
        self.assertEqual(response.status_code, 200)

    def test_admin_dashboard_access(self):
        self.client.login(username='admin', password='testpass123')
        response = self.client.get(reverse('admin_dashboard'))
        self.assertEqual(response.status_code, 200)

    def test_unauthorized_dashboard_access(self):
        self.client.login(username='patient', password='testpass123')
        response = self.client.get(reverse('doctor_dashboard'))
        self.assertEqual(response.status_code, 302)  # Redirect to unauthorized page

    def test_book_appointment(self):
        self.client.login(username='patient', password='testpass123')
        doctor = User.objects.get(username='doctor')
        response = self.client.post(reverse('book_appointment'), {
            'doctor': doctor.id,
            'date': timezone.now().date(),
            'time': '14:00',
            'reason': 'Test appointment'
        })
        if response.status_code != 302:
            print(f"Response content: {response.content.decode()}")  
        self.assertEqual(response.status_code, 302)  
        self.assertTrue(Appointment.objects.filter(patient=self.patient, doctor=doctor).exists())

    def test_list_appointments(self):
        self.client.login(username='patient', password='testpass123')
        Appointment.objects.create(
            patient=self.patient,
            doctor=self.doctor,
            date=timezone.now().date(),
            time='14:00',
            reason='Test appointment'
        )
        response = self.client.get(reverse('list_appointments'))
        self.assertEqual(response.status_code, 200)
        self.assertContains(response, 'Test appointment')

    def test_profile_update(self):
        self.client.login(username='patient', password='testpass123')
        response = self.client.post(reverse('profile'), {
            'first_name': 'Updated',
            'last_name': 'Name',
            'email': 'updated@example.com',
            'address': '123 Test St'
        })
        self.assertEqual(response.status_code, 302)  # Redirect after update
        self.patient.refresh_from_db()
        self.assertEqual(self.patient.first_name, 'Updated')
        self.assertEqual(self.patient.last_name, 'Name')
        self.assertEqual(self.patient.email, 'updated@example.com')
        self.assertEqual(self.patient.userprofile.address, '123 Test St')


================================================================================

File: E:\SmartCare-Surgery-System\authentication\urls.py
from django.urls import path
from . import views

urlpatterns = [
    path('register/', views.register, name='register'),
    path('login/', views.user_login, name='login'),
    path('logout/', views.user_logout, name='logout'),
    path('profile/', views.profile, name='profile'),
    path('unauthorized/', views.unauthorized_access, name='unauthorized_access'),
    path('gps/', views.gp_list, name='gp_list'),
    path('manage_gp/', views.manage_gp, name='manage_gps'),
    path('manage_gp/<int:gp_id>/', views.manage_gp, name='edit_gp'),
    path('delete_gp/<int:gp_id>/', views.delete_gp, name='delete_gp'),
    path('pending-registrations/', views.pending_registrations, name='pending_registrations'),
    path('approve-registration/<int:pending_id>/', views.approve_registration, name='approve_registration'),
]


================================================================================

File: E:\SmartCare-Surgery-System\authentication\views.py
import logging

logger = logging.getLogger(__name__)

from django.shortcuts import render, redirect, get_object_or_404
from django.contrib.auth import login, authenticate, logout
from django.contrib.auth.decorators import login_required
from django.contrib import messages
from django.conf import settings
from .forms import UserRegistrationForm, UserLoginForm, UserProfileForm, GPForm, CustomUserChangeForm
from .models import UserProfile, GPDetails, PendingRegistration, User
from .decorators import user_is_patient, user_is_doctor, user_is_nurse, user_is_admin


def register(request):
    if request.method == 'POST':
        form = UserRegistrationForm(request.POST)
        logger.debug(f"Form data: {request.POST}")  # Debug log
        if form.is_valid():
            user = form.save(commit=False)
            user_type = form.cleaned_data.get('user_type')
            logger.debug(f"User type: {user_type}")  # Debug log
            
            if user_type == 'doctor':
                user.specialty = form.cleaned_data.get('specialty')
                logger.debug(f"Doctor specialty: {user.specialty}")  # Debug log
            elif user_type == 'patient':
                user.patient_type = form.cleaned_data.get('patient_type')
                logger.debug(f"Patient type: {user.patient_type}")  # Debug log
            
            if user_type in ['doctor', 'nurse', 'admin']:
                user.is_active = False
                user.save()
                PendingRegistration.objects.create(user=user)
                messages.info(request, 'Your registration is pending admin approval. You will be notified once approved.')
                return redirect('login')
            else:
                user.save()
                login(request, user)
                messages.success(request, f'Account created for {user.username}. You are now logged in.')
                return redirect('patient_dashboard')
        else:
            logger.debug(f"Form errors: {form.errors}")  # Debug log
    else:
        form = UserRegistrationForm()
    
    context = {
        'form': form,
        'GOOGLE_MAPS_API_KEY': settings.GOOGLE_MAPS_API_KEY
    }
    return render(request, 'authentication/register.html', context)

@login_required
def profile(request):
    if request.method == 'POST':
        form = UserProfileForm(request.POST, instance=request.user.userprofile)
        if form.is_valid():
            form.save()
            messages.success(request, 'Your profile has been updated successfully.')
            return redirect('profile')
    else:
        form = UserProfileForm(instance=request.user.userprofile)
    
    context = {
        'form': form,
        'GOOGLE_MAPS_API_KEY': settings.GOOGLE_MAPS_API_KEY
    }
    return render(request, 'authentication/profile.html', context)

def user_login(request):
    if request.method == 'POST':
        form = UserLoginForm(data=request.POST)
        if form.is_valid():
            user = form.get_user()
            login(request, user)
            UserProfile.objects.get_or_create(user=user)
            messages.success(request, 'You have successfully logged in.')
            return redirect_to_dashboard(user)
    else:
        form = UserLoginForm()
    return render(request, 'authentication/login.html', {'form': form})

@login_required
def user_logout(request):
    logout(request)
    messages.success(request, 'You have been logged out.')
    return redirect('login')


def redirect_to_dashboard(user):
    if user.is_admin():
        return redirect('admin_dashboard')
    elif user.is_doctor():
        return redirect('doctor_dashboard')
    elif user.is_nurse():
        return redirect('nurse_dashboard')
    else:
        return redirect('patient_dashboard')

@login_required
@user_is_admin
def approve_registration(request, pending_id):
    pending = get_object_or_404(PendingRegistration, id=pending_id)
    user = pending.user
    user.is_active = True
    user.save()
    pending.delete()
    messages.success(request, f'Registration approved for {user.username}.')
    return redirect('pending_registrations')

@login_required
@user_is_admin
def pending_registrations(request):
    pending = PendingRegistration.objects.all()
    return render(request, 'authentication/pending_registrations.html', {'pending': pending})

@login_required
@user_is_admin
def manage_users(request):
    users = User.objects.all()
    if request.method == 'POST':
        form = CustomUserChangeForm(request.POST)
        if form.is_valid():
            form.save()
            messages.success(request, 'User updated successfully.')
            return redirect('manage_users')
    else:
        form = CustomUserChangeForm()
    return render(request, 'authentication/manage_users.html', {'users': users, 'form': form})

@login_required
@user_is_admin
def manage_gp(request, gp_id=None):
    if gp_id:
        gp = get_object_or_404(GPDetails, id=gp_id)
    else:
        gp = None

    if request.method == 'POST':
        form = GPForm(request.POST, instance=gp)
        if form.is_valid():
            form.save()
            messages.success(request, 'GP details saved successfully.')
            return redirect('gp_list')
        else:
            messages.error(request, 'Please correct the error below.')
    else:
        form = GPForm(instance=gp)

    return render(request, 'authentication/manage_gp.html', {'form': form, 'gp': gp})

@login_required
@user_is_admin
def delete_gp(request, gp_id):
    gp = get_object_or_404(GPDetails, id=gp_id)
    if request.method == 'POST':
        gp.delete()
        messages.success(request, 'GP deleted successfully.')
        return redirect('gp_list')
    return render(request, 'authentication/delete_gp.html', {'gp': gp})

@login_required
@user_is_admin
def gp_list(request):
    gps = GPDetails.objects.all()
    return render(request, 'authentication/gp_list.html', {'gps': gps})

def unauthorized_access(request):
    return render(request, 'authentication/unauthorized_access.html')

@login_required
@user_is_patient
def patient_dashboard(request):
    return render(request, 'dashboards/patient_dashboard.html')

@login_required
@user_is_doctor
def doctor_dashboard(request):
    return render(request, 'dashboards/doctor_dashboard.html')

@login_required
@user_is_nurse
def nurse_dashboard(request):
    return render(request, 'dashboards/nurse_dashboard.html')

@login_required
@user_is_admin
def admin_dashboard(request):
    return render(request, 'dashboards/admin_dashboard.html')

================================================================================

File: E:\SmartCare-Surgery-System\dashboards\admin.py
from django.contrib import admin

# Register your models here.


================================================================================

File: E:\SmartCare-Surgery-System\dashboards\apps.py
from django.apps import AppConfig


class DashboardsConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'dashboards'


================================================================================

File: E:\SmartCare-Surgery-System\dashboards\forms.py
from django import forms
from django.contrib.auth import get_user_model
from django.contrib.auth.forms import UserCreationForm, UserChangeForm
from authentication.models import UserProfile

User = get_user_model()

class CustomUserCreationForm(UserCreationForm):
    class Meta:
        model = User
        fields = ['username', 'email', 'first_name', 'last_name', 'date_of_birth', 'user_type', 'patient_type', 'is_active']

class CustomUserChangeForm(UserChangeForm):
    password1 = forms.CharField(label='Password', widget=forms.PasswordInput, required=False)
    password2 = forms.CharField(label='Confirm Password', widget=forms.PasswordInput, required=False)
    date_of_birth = forms.DateField(widget=forms.DateInput(attrs={'type': 'date'}), required=False)

    class Meta:
        model = User
        fields = ['username', 'email', 'first_name', 'last_name', 'date_of_birth', 'user_type', 'patient_type', 'is_active']

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.fields.pop('password')

    def clean(self):
        cleaned_data = super().clean()
        password1 = cleaned_data.get("password1")
        password2 = cleaned_data.get("password2")
        if password1 and password2 and password1 != password2:
            raise forms.ValidationError("Passwords don't match")
        return cleaned_data

    def save(self, commit=True):
        user = super().save(commit=False)
        password = self.cleaned_data.get('password1')
        if password:
            user.set_password(password)
        if commit:
            user.save()
        return user

class UserProfileForm(forms.ModelForm):
    first_name = forms.CharField(max_length=30)
    last_name = forms.CharField(max_length=30)
    email = forms.EmailField()

    class Meta:
        model = UserProfile
        fields = ['address']

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        if self.instance and self.instance.user_id:
            self.fields['first_name'].initial = self.instance.user.first_name
            self.fields['last_name'].initial = self.instance.user.last_name
            self.fields['email'].initial = self.instance.user.email

    def save(self, commit=True):
        profile = super().save(commit=False)
        user = profile.user
        user.first_name = self.cleaned_data['first_name']
        user.last_name = self.cleaned_data['last_name']
        user.email = self.cleaned_data['email']
        if commit:
            user.save()
            profile.save()
        return profile



================================================================================

File: E:\SmartCare-Surgery-System\dashboards\models.py
from django.db import models

# Create your models here.


================================================================================

File: E:\SmartCare-Surgery-System\dashboards\tests.py
from django.test import TestCase

# Create your tests here.


================================================================================

File: E:\SmartCare-Surgery-System\dashboards\urls.py
from django.urls import path
from . import views

urlpatterns = [
    path('patient/', views.patient_dashboard, name='patient_dashboard'),
    path('doctor/', views.doctor_dashboard, name='doctor_dashboard'),
    path('nurse/', views.nurse_dashboard, name='nurse_dashboard'),
    path('admin/', views.admin_dashboard, name='admin_dashboard'),
    path('manage_users/', views.manage_users, name='manage_users'),
    path('manage-appointments/', views.manage_appointments, name='manage_appointments'),
]


================================================================================

File: E:\SmartCare-Surgery-System\dashboards\views.py
from django.shortcuts import render, redirect
from django.shortcuts import get_object_or_404
from django.contrib.auth.decorators import login_required
from django.contrib import messages
from django.db.models import Sum, Count
from django.utils import timezone
from datetime import timedelta
from authentication.decorators import user_is_patient, user_is_doctor, user_is_nurse, user_is_admin
from authentication.models import User
from appointments.models import Appointment, Invoice, Prescription
from .forms import CustomUserCreationForm, CustomUserChangeForm

@login_required
@user_is_patient
def patient_dashboard(request):
    appointments = Appointment.objects.filter(patient=request.user)
    prescriptions = Prescription.objects.filter(patient=request.user)
    invoices = Invoice.objects.filter(patient=request.user)
    context = {
        'appointments': appointments,
        'prescriptions': prescriptions,
        'invoices': invoices,
    }
    return render(request, 'dashboards/patient_dashboard.html', context)

@login_required
@user_is_doctor
def doctor_dashboard(request):
    appointments = Appointment.objects.filter(doctor=request.user)
    prescriptions = Prescription.objects.filter(doctor=request.user)
    booking_status = Appointment.get_booking_status()
    context = {
        'appointments': appointments,
        'prescriptions': prescriptions,
        'booking_status': booking_status,
    }
    return render(request, 'dashboards/doctor_dashboard.html', context)

@login_required
@user_is_nurse
def nurse_dashboard(request):
    appointments = Appointment.objects.filter(nurse=request.user)
    booking_status = Appointment.get_booking_status()
    context = {
        'appointments': appointments,
        'booking_status': booking_status,
    }
    return render(request, 'dashboards/nurse_dashboard.html', context)

@login_required
@user_is_admin
def admin_dashboard(request):
    end_date = timezone.now().date()
    start_date = end_date - timedelta(days=30)
    if request.method == 'POST':
        start_date = request.POST.get('start_date')
        end_date = request.POST.get('end_date')
    invoices = Invoice.objects.filter(date_issued__range=[start_date, end_date])
    daily_turnover = invoices.values('date_issued__date').annotate(total=Sum('total_amount'))
    weekly_turnover = invoices.values('date_issued__week').annotate(total=Sum('total_amount'))
    monthly_turnover = invoices.values('date_issued__month').annotate(total=Sum('total_amount'))
    patient_stats = Appointment.objects.filter(date__range=[start_date, end_date]).values('patient__user_type').annotate(count=Count('id'))
    booking_status = Appointment.get_booking_status()
    context = {
        'daily_turnover': daily_turnover,
        'weekly_turnover': weekly_turnover,
        'monthly_turnover': monthly_turnover,
        'patient_stats': patient_stats,
        'start_date': start_date,
        'end_date': end_date,
        'booking_status': booking_status,
    }
    return render(request, 'dashboards/admin_dashboard.html', context)

@login_required
@user_is_admin
def manage_users(request):
    user_type_filter = request.GET.get('user_type')
    user_role_filter = request.GET.get('user_role')

    users = User.objects.all()

    if user_type_filter:
        users = users.filter(patient_type=user_type_filter)
    if user_role_filter:
        users = users.filter(user_type=user_role_filter)

    if request.method == 'POST':
        if 'edit_user' in request.POST:
            user_id = request.POST.get('user_id')
            user = get_object_or_404(User, id=user_id)
            form = CustomUserChangeForm(request.POST, instance=user)
            if form.is_valid():
                form.save()
                messages.success(request, 'User has been updated successfully.')
                return redirect('manage_users')
        elif 'delete_user' in request.POST:
            user_id = request.POST.get('user_id')
            user = get_object_or_404(User, id=user_id)
            user.delete()
            messages.success(request, 'User has been deleted successfully.')
            return redirect('manage_users')
    else:
        form = CustomUserChangeForm()

    context = {
        'users': users,
        'form': form,
        'user_type_filter': user_type_filter,
        'user_role_filter': user_role_filter,
    }
    return render(request, 'dashboards/manage_users.html', context)

@login_required
@user_is_admin
def manage_appointments(request):
    appointments = Appointment.objects.all().order_by('-date', '-time')
    context = {
        'appointments': appointments,
    }
    return render(request, 'dashboards/manage_appointments.html', context)


================================================================================

File: E:\SmartCare-Surgery-System\home\admin.py
from django.contrib import admin

# Register your models here.


================================================================================

File: E:\SmartCare-Surgery-System\home\apps.py
from django.apps import AppConfig


class HomeConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'home'


================================================================================

File: E:\SmartCare-Surgery-System\home\models.py
from django.db import models

# Create your models here.


================================================================================

File: E:\SmartCare-Surgery-System\home\tests.py
from django.test import TestCase

# Create your tests here.


================================================================================

File: E:\SmartCare-Surgery-System\home\urls.py
from django.urls import path
from . import views

urlpatterns = [
    path('', views.homepage, name='homepage'),
]


================================================================================

File: E:\SmartCare-Surgery-System\home\views.py
from django.shortcuts import render

def homepage(request):
    return render(request, 'home/homepage.html')


================================================================================

File: E:\SmartCare-Surgery-System\smartcare\asgi.py
"""
ASGI config for smartcare project.

It exposes the ASGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/howto/deployment/asgi/
"""

import os

from django.core.asgi import get_asgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'smartcare.settings')

application = get_asgi_application()


================================================================================

File: E:\SmartCare-Surgery-System\smartcare\settings.py
from pathlib import Path
import os
import dj_database_url

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

SECRET_KEY = 'django-insecure-#&lr92vbcwza_950fjj05r@=!knog31zdyglgs182yt0yr67=c'

DEBUG = True

ALLOWED_HOSTS = []

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'authentication',
    'collaboration',
    'appointments',
    'dashboards',
    'home',
    'rest_framework',
    'smartcare_api',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'smartcare.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'smartcare', 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'smartcare.wsgi.application'

DATABASE_URL = os.environ.get('DATABASE_URL')

if DATABASE_URL:
    DATABASES = {
        'default': dj_database_url.config(
            default=DATABASE_URL,
            conn_max_age=600,
            ssl_require=False  
        )
    }
else:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': os.environ.get('DB_NAME', 'smartcare_db'),
            'USER': os.environ.get('DB_USER', 'smartcare_user'),
            'PASSWORD': os.environ.get('DB_PASSWORD', '030700'),
            'HOST': os.environ.get('DB_HOST', 'localhost'),
            'PORT': os.environ.get('DB_PORT', '5432'),
        }
    }

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Europe/London'

USE_I18N = True

USE_TZ = True

STATIC_URL = '/static/'
STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

LOGIN_REDIRECT_URL = '/dashboards/dashboard/'
LOGIN_URL = '/auth/login/'
AUTH_USER_MODEL = 'authentication.User'

GOOGLE_OAUTH2_CLIENT_SECRETS_JSON = os.path.join(BASE_DIR, 'appointments', 'client_secret_838839251496-p0j4ck0e5v654to1nfaf0b283kvjhoap.apps.googleusercontent.com.json')
GOOGLE_OAUTH2_SCOPES = ['https://www.googleapis.com/auth/calendar']

GOOGLE_MAPS_API_KEY = 'AIzaSyC_1ijDkFAqIKJ0jeQF6SI9VDUQO5pGUvk'
GOOGLE_MAPS_JAVASCRIPT_API = f'https://maps.googleapis.com/maps/api/js?key={GOOGLE_MAPS_API_KEY}&libraries=places'

EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
DEFAULT_FROM_EMAIL = 'noreply@smartcaresurgery.com'

================================================================================

File: E:\SmartCare-Surgery-System\smartcare\urls.py
from django.contrib import admin
from django.urls import path, include
from django.conf import settings
from django.conf.urls.static import static

urlpatterns = [
    path('api/', include('smartcare_api.urls')),
    path('admin/', admin.site.urls),
    path('auth/', include('authentication.urls')),
    path('appointments/', include('appointments.urls')),
    path('dashboards/', include('dashboards.urls')),
    path('collaboration/', include('collaboration.urls')),
    path('', include('home.urls')),
]

if settings.DEBUG:
    urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)
    urlpatterns += static(settings.STATIC_URL, document_root=settings.STATIC_ROOT)

================================================================================

File: E:\SmartCare-Surgery-System\smartcare\wsgi.py
"""
WSGI config for smartcare project.

It exposes the WSGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/howto/deployment/wsgi/
"""

import os

from django.core.wsgi import get_wsgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'smartcare.settings')

application = get_wsgi_application()


================================================================================

File: E:\SmartCare-Surgery-System\smartcare\templates\base.html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{% block title %}SmartCare Surgery{% endblock %}</title>
    {% load static %}
    <link rel="stylesheet" href="{% static 'css/style.css' %}">
    {% block extra_head %}{% endblock %}
    <style>
        nav ul {
            display: flex;
            justify-content: center;
            list-style-type: none;
            padding: 0;
            margin: 0;
        }

        nav ul li {
            margin: 0 15px;
        }

        nav ul li a {
            text-decoration: none;
            color: rgb(255, 255, 255);
        }
    </style>
</head>
<body>
    <header>
        <nav style="background-color: #4CAF50; padding: 10px 0;">
            <ul>
                <li><a href="{% url 'homepage' %}">Home</a></li>
                {% if user.is_authenticated %}
                    {% if user.is_patient %}
                        <li><a href="{% url 'patient_dashboard' %}">Dashboard</a></li>
                        <li><a href="{% url 'book_appointment' %}">Book Appointment</a></li>
                        <li><a href="{% url 'patient_invoices' %}">My Invoices</a></li>
                    {% elif user.is_doctor %}
                        <li><a href="{% url 'doctor_dashboard' %}">Dashboard</a></li>
                        <li><a href="{% url 'list_invoices' %}">Invoices</a></li>
                        <li><a href="{% url 'view_cfc_appointments' %}">Overview</a></li>
                    {% elif user.is_nurse %}
                        <li><a href="{% url 'nurse_dashboard' %}">Dashboard</a></li>
                        <li><a href="{% url 'list_invoices' %}">Invoices</a></li>
                        <li><a href="{% url 'view_cfc_appointments' %}">Overview</a></li>
                    {% elif user.is_admin %}
                        <li><a href="{% url 'admin_dashboard' %}">Dashboard</a></li>
                        <li><a href="{% url 'manage_users' %}">Manage Users</a></li>
                        <li><a href="{% url 'admin_invoices' %}">Manage Invoices</a></li>
                        <li><a href="{% url 'view_cfc_appointments' %}">Overview</a></li>
                    {% endif %}
                    <li><a href="{% url 'profile' %}">Profile</a></li>
                    <li><a href="{% url 'view_appointments' %}">Appointments</a></li>
                    <li><a href="{% url 'logout' %}">Logout</a></li>
                {% else %}
                    <li><a href="{% url 'login' %}">Login</a></li>
                    <li><a href="{% url 'register' %}">Register</a></li>
                {% endif %}
            </ul>
        </nav>
    </header>

    <main>
        {% if messages %}
        <div class="messages">
            {% for message in messages %}
            <div class="message {% if message.tags %}{{ message.tags }}{% endif %}">
                {{ message }}
            </div>
            {% endfor %}
        </div>
        {% endif %}

        {% block content %}
        {% endblock %}
    </main>

    <footer style="text-align: center; padding: 10px 0; background-color: #f9f9f9;">
        <p>&copy; 2024 SmartCare Surgery System</p>
    </footer>

    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    {% block extra_scripts %}{% endblock %}
</body>
</html>

================================================================================

File: E:\SmartCare-Surgery-System\smartcare\templates\footer.html


================================================================================

File: E:\SmartCare-Surgery-System\smartcare\templates\header.html


================================================================================

File: E:\SmartCare-Surgery-System\smartcare\templates\navigation.html


================================================================================

File: E:\SmartCare-Surgery-System\smartcare\templates\appointments\admin_invoices.html
{% extends 'base.html' %}

{% block extra_head %}
<style>
    .container {
        max-width: 800px;
        margin: 0 auto;
        padding: 20px;
    }

    h2, h3 {
        color: #4CAF50;
        text-align: center;
        margin-bottom: 20px;
        font-family: 'Arial', sans-serif;
        font-weight: bold;
    }

    p {
        font-size: 18px;
        line-height: 1.6;
        margin-bottom: 20px;
        font-family: 'Arial', sans-serif;
    }

    table.table {
        width: 100%;
        border-collapse: collapse;
        margin-top: 20px;
        font-family: 'Arial', sans-serif;
    }

    table.table th, table.table td {
        border: 1px solid #ddd;
        padding: 12px;
        text-align: left;
    }

    table.table th {
        background-color: #f4f4f4;
        font-weight: bold;
        font-family: 'Arial', sans-serif;
    }

    table.table tbody tr:nth-child(even) {
        background-color: #f9f9f9;
    }

    .btn-primary {
        background-color: #4CAF50;
        border: none;
        padding: 10px 15px;
        color: white;
        cursor: pointer;
        border-radius: 4px;
        text-decoration: none;
        font-family: 'Arial', sans-serif;
        font-size: 14px;
        transition: background-color 0.3s ease;
    }

    .btn-primary:hover {
        background-color: #45a049;
    }

    .btn-danger {
        background-color: #f44336;
        border: none;
        padding: 5px 10px;
        color: white;
        cursor: pointer;
        border-radius: 4px;
        text-decoration: none;
        font-family: 'Arial', sans-serif;
        font-size: 14px;
        transition: background-color 0.3s ease;
    }

    .btn-danger:hover {
        background-color: #e53935;
    }

    form {
        margin-bottom: 30px;
    }

    form .btn-primary {
        margin-top: 10px;
    }

    table.table thead {
        border-bottom: 2px solid #ddd;
    }

    table.table tbody tr:hover {
        background-color: #f1f1f1;
    }

</style>
{% endblock %}

{% block content %}
<div class="container mt-5">
    <h2>Invoice Summary</h2>
    <p><strong>Total Turnover:</strong> £{{ total_turnover }}</p>
    <p><strong>NHS Charges:</strong> £{{ nhs_charges }}</p>
    <p><strong>Private Payments:</strong> £{{ private_payments }}</p>

    <h3>Manage Fees</h3>
    <form method="post">
        {% csrf_token %}
        {{ fee_form.non_field_errors }}
        {% for field in fee_form %}
            <div class="form-group">
                {{ field.label_tag }}
                {{ field }}
                {% if field.errors %}
                    <div class="alert alert-danger">
                        {{ field.errors }}
                    </div>
                {% endif %}
            </div>
        {% endfor %}
        <button type="submit" name="fee_form" class="btn btn-primary">Add Fee</button>
    </form>

    <h3>Current Fees</h3>
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Title</th>
                <th>Amount</th>
                <th>Patient Type</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
        {% for fee in fees %}
            <tr>
                <td>{{ fee.title }}</td>
                <td>£{{ fee.amount }}</td>
                <td>{{ fee.get_patient_type_display }}</td>
                <td>
                    <form method="post" action="{% url 'delete_fee' fee.id %}">
                        {% csrf_token %}
                        <button type="submit" class="btn btn-sm btn-danger">Delete</button>
                    </form>
                </td>
            </tr>
        {% endfor %}
        </tbody>
    </table>
    <br>
    <br>
    <h3>Manage Rates</h3>
    <form method="post" action="{% url 'admin_invoices' %}">
        {% csrf_token %}
        {{ rate_form.as_p }}
        <button type="submit" name="rate_form" class="btn btn-primary">Update Rate</button>
    </form>

    <h3>Current Rates</h3>
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Rate Type</th>
                <th>Amount</th>
            </tr>
        </thead>
        <tbody>
        {% for rate in rates %}
            <tr>
                <td>{{ rate.get_rate_type_display }}</td>
                <td>£{{ rate.amount }}</td>
            </tr>
        {% endfor %}
        </tbody>
    </table>
    <br>
    <br>
    <h3>All Invoices</h3>
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Invoice ID</th>
                <th>Patient</th>
                <th>Type</th>
                <th>Amount</th>
                <th>Status</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
        {% for invoice in invoices %}
            <tr>
                <td>{{ invoice.id }}</td>
                <td>{{ invoice.patient.get_full_name }}</td>
                <td>{{ invoice.get_patient_type_display }}</td>
                <td>£{{ invoice.total_amount }}</td>
                <td>{{ invoice.get_payment_status_display }}</td>
                <td>
                    <a href="{% url 'view_edit_invoice' invoice.id %}" class="btn btn-sm btn-primary">View/Edit</a>
                </td>
            </tr>
        {% endfor %}
        </tbody>
    </table>
</div>
{% endblock %}


================================================================================

File: E:\SmartCare-Surgery-System\smartcare\templates\appointments\appointment_detail.html
{% extends 'base.html' %}

{% block title %}Appointment Details{% endblock %}

{% block content %}
<div class="container mt-5">
    <h2>Appointment Details</h2>
    <p><strong>Patient:</strong> {{ patient.get_full_name }}</p>
    {% if doctor %}
        <p><strong>Doctor:</strong> {{ doctor.get_full_name }}</p>
        <p><strong>Specialty:</strong> {{ doctor.get_specialty_display }}</p>
    {% elif nurse %}
        <p><strong>Nurse:</strong> {{ nurse.get_full_name }}</p>
    {% else %}
        <p><strong>Staff:</strong> Not assigned</p>
    {% endif %}
    <p><strong>Date:</strong> {{ appointment.date }}</p>
    <p><strong>Time:</strong> {{ appointment.time }}</p>
    <p><strong>Reason:</strong> {{ appointment.reason }}</p>
    <p><strong>Status:</strong> {{ appointment.get_status_display }} (Raw: {{ raw_status }})</p>
    
    <h3>Prescriptions</h3>
    {% if prescriptions %}
        <ul class="list-group text-center">
        {% for prescription in prescriptions %}
            <li class="list-group-item">{{ prescription.medication }} - {{ prescription.dosage }} - {{ prescription.instructions }}</li>
        {% endfor %}
        </ul>
    {% else %}
        <p class="text-center">No prescriptions issued yet.</p>
    {% endif %}

    {% if user.is_doctor or user.is_nurse %}
        <div class="text-center mt-3">
            <a href="{% url 'issue_prescription' appointment.id %}" class="btn btn-secondary">Issue New Prescription</a>
        </div>
    {% endif %}

    {% if appointment.status == 'SCHEDULED' %}
    <div class="text-center mt-4">
        {% if user.is_doctor or user.is_nurse or user.is_admin %}
            <a href="{% url 'complete_appointment' appointment.id %}" class="btn btn-success">Complete Appointment</a>
        {% endif %}

        {% if user.is_patient or user.is_doctor or user.is_nurse or user.is_admin %}
            <a href="{% url 'cancel_appointment' appointment.id %}" class="btn btn-danger">Cancel Appointment</a>
        {% endif %}
        <br>
        <br>
        {% if user.is_patient or user.is_doctor or user.is_nurse or user.is_admin %}
            <a href="{% url 'reschedule_appointment' appointment.id %}" class="btn btn-warning">Reschedule/Forward Appointment</a>
        {% endif %}
    </div>
    {% else %}
        <p class="text-center mt-4">This appointment is {{ appointment.get_status_display }}.</p>
    {% endif %}

    <div class="text-center mt-3">
        <a href="{% url 'view_appointments' %}" class="btn btn-secondary">Back to Appointments</a>
    </div>
</div>
{% endblock %}

{% block extra_head %}
<style>
    .container {
        max-width: 800px;
        margin: 0 auto;
        padding: 20px;
        background: #ffffff;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }

    h2 {
        text-align: center;
        margin-bottom: 20px;
    }

    .list-group {
        display: flex;
        flex-direction: column;
        align-items: center;
    }

    .list-group-item {
        width: 80%;
        margin-bottom: 10px;
        background-color: #f9f9f9;
        border: 1px solid #ddd;
        border-radius: 4px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }

    .btn {
        margin-right: 10px;
        color: white;
    }

    .btn-secondary {
        background-color: #6c757d;
        border: none;
    }

    .btn-secondary:hover {
        background-color: #5a6268;
    }

    .btn-primary {
        background-color: #007bff;
        border: none;
    }

    .btn-primary:hover {
        background-color: #0056b3;
    }

    .btn-danger {
        background-color: #dc3545;
        border: none;
    }

    .btn-danger:hover {
        background-color: #c82333;
    }

    .btn-success {
        background-color: #28a745;
        border: none;
    }

    .btn-success:hover {
        background-color: #218838;
    }

    .btn-warning {
        background-color: #ffc107;
        border: none;
    }

    .btn-warning:hover {
        background-color: #e0a800;
    }

    .mt-3 {
        margin-top: 1rem !important;
    }

    .mt-4 {
        margin-top: 1.5rem !important;
    }

    .text-center {
        text-align: center;
    }
</style>
{% endblock %}


================================================================================

File: E:\SmartCare-Surgery-System\smartcare\templates\appointments\book_appointment.html
{% extends 'base.html' %}
{% block title %}Book Appointment{% endblock %}
{% block content %}
<h2>Book an Appointment</h2>
<form method="post" id="appointment-form" class="appointment-form">
    {% csrf_token %}
    {{ form.non_field_errors }}
    
    <div class="form-group">
        <label for="{{ form.date.id_for_label }}">Date:</label>
        {{ form.date }}
        {{ form.date.errors }}
    </div>
    
    <div class="form-group">
        <label for="{{ form.time.id_for_label }}">Time:</label>
        {{ form.time }}
        {{ form.time.errors }}
    </div>
    
    <div class="form-group">
        <label for="{{ form.reason.id_for_label }}">Reason:</label>
        {{ form.reason }}
        {{ form.reason.errors }}
    </div>
    
    <div class="form-group">
        <label for="{{ form.doctor_or_nurse.id_for_label }}">Select Type:</label>
        {{ form.doctor_or_nurse }}
        {{ form.doctor_or_nurse.errors }}
    </div>
    
    <div class="form-group" id="specialty-group" style="display: none;">
        <label for="{{ form.specialty.id_for_label }}">Specialty:</label>
        {{ form.specialty }}
        {{ form.specialty.errors }}
    </div>
    
    <div class="form-group">
        <label for="{{ form.staff.id_for_label }}">Select Staff:</label>
        {{ form.staff }}
        {{ form.staff.errors }}
    </div>
    
    <div class="form-group">
        <label for="{{ form.appointment_type.id_for_label }}">Appointment Type:</label>
        {{ form.appointment_type }}
        {{ form.appointment_type.errors }}
    </div>
    
    <button type="submit" class="btn-primary custom-button">Book Appointment</button>
</form>
{% endblock %}

{% block extra_head %}
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.css">
<style>
    .appointment-form {
        max-width: 600px;
        margin: 0 auto;
        padding: 20px;
        background: #f9f9f9;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }

    .appointment-form h2 {
        text-align: center;
        margin-bottom: 20px;
        color: #4CAF50;
    }

    .form-group {
        margin-bottom: 15px;
    }

    .form-group label {
        display: block;
        margin-bottom: 5px;
        font-weight: bold;
    }

    .form-group input[type="text"],
    .form-group input[type="date"],
    .form-group input[type="time"],
    .form-group textarea,
    .form-group select {
        width: 100%;
        padding: 10px;
        border: 1px solid #ddd;
        border-radius: 4px;
        box-sizing: border-box;
    }

    .form-group input[type="text"]:focus,
    .form-group input[type="date"]:focus,
    .form-group input[type="time"]:focus,
    .form-group textarea:focus,
    .form-group select:focus {
        border-color: #4CAF50;
        outline: none;
        box-shadow: 0 0 5px rgba(76, 175, 80, 0.5);
    }

    .btn-primary {
        display: block;
        width: 100%;
        padding: 10px 20px;
        background-color: #4CAF50;
        color: white;
        border: none;
        border-radius: 4px;
        font-size: 16px;
        cursor: pointer;
        text-align: center;
    }

    .btn-primary:hover {
        background-color: #45a049;
    }
</style>
{% endblock %}

{% block extra_scripts %}
<script src="https://cdn.jsdelivr.net/npm/flatpickr"></script>
<script>
    document.addEventListener('DOMContentLoaded', function() {
        var doctorOrNurseSelect = document.getElementById('{{ form.doctor_or_nurse.id_for_label }}');
        var specialtyGroup = document.getElementById('specialty-group');
        var specialtySelect = document.getElementById('{{ form.specialty.id_for_label }}');
        var staffSelect = document.getElementById('{{ form.staff.id_for_label }}');

        function updateFields() {
            var doctorOrNurse = doctorOrNurseSelect.value;
            var specialty = doctorOrNurse === 'doctor' ? specialtySelect.value : '';

            if (doctorOrNurse === 'doctor') {
                specialtyGroup.style.display = 'block';
            } else {
                specialtyGroup.style.display = 'none';
                specialtySelect.value = '';
            }

            fetch(`{% url 'load_staff' %}?doctor_or_nurse=${doctorOrNurse}&specialty=${specialty}`)
                .then(response => response.json())
                .then(data => {
                    staffSelect.innerHTML = '<option value="">Select Staff</option>';
                    data.forEach(function(item) {
                        var option = document.createElement('option');
                        option.value = item.id;
                        option.textContent = item.name;
                        staffSelect.appendChild(option);
                    });
                });
        }

        doctorOrNurseSelect.addEventListener('change', updateFields);
        specialtySelect.addEventListener('change', updateFields);

        // Initial call to set up the form correctly
        updateFields();

        // Initialize the date picker
        flatpickr('#{{ form.date.id_for_label }}', {
            dateFormat: 'Y-m-d',
            minDate: 'today'
        });

        // Initialize the time picker
        flatpickr('#{{ form.time.id_for_label }}', {
            enableTime: true,
            noCalendar: true,
            dateFormat: "H:i",
            time_24hr: true,
            minuteIncrement: 10
        });
    });
</script>
{% endblock %}


================================================================================

File: E:\SmartCare-Surgery-System\smartcare\templates\appointments\cancel_appointment.html
{% extends 'base.html' %}

{% block title %}Cancel Appointment{% endblock %}

{% block content %}
<div class="container mt-5">
    <h2>Cancel Appointment</h2>
    <div class="alert alert-warning" role="alert">
        Are you sure you want to cancel this appointment?
    </div>
    <div class="card mb-4">
        <div class="card-body">
            <h5 class="card-title">Appointment Details</h5>
            <p><strong>Patient:</strong> {{ appointment.patient.get_full_name }}</p>
            <p><strong>Date:</strong> {{ appointment.date }}</p>
            <p><strong>Time:</strong> {{ appointment.time }}</p>
            <p><strong>Reason:</strong> {{ appointment.reason }}</p>
            {% if appointment.doctor %}
                <p><strong>Doctor:</strong> Dr. {{ appointment.doctor.get_full_name }}</p>
            {% elif appointment.nurse %}
                <p><strong>Nurse:</strong> {{ appointment.nurse.get_full_name }}</p>
            {% endif %}
        </div>
    </div>
    <form method="post">
        {% csrf_token %}
        <div class="form-group">
            <label for="cancellation_reason">Reason for cancellation (optional):</label>
            <textarea class="form-control" id="cancellation_reason" name="cancellation_reason" rows="3"></textarea>
        </div>
        <button type="submit" class="btn btn-danger">Confirm Cancellation</button>
        <a href="{% url 'view_appointments' %}" class="btn btn-secondary">Back to Appointments</a>
    </form>
</div>
{% endblock %}

================================================================================

File: E:\SmartCare-Surgery-System\smartcare\templates\appointments\cfc.html
{% extends 'base.html' %}

{% block content %}
<div class="container mt-5">
    <h2 class="text-center mb-4">Overview of Your Appointments</h2>
    {% if cfc_appointments %}
        <table class="table table-striped table-bordered">
            <thead class="thead-dark">
                <tr>
                    <th>Date</th>
                    <th>Time</th>
                    <th>Patient</th>
                    <th>Doctor/Nurse</th>
                    <th>Status</th>
                    <th>Reason</th>
                </tr>
            </thead>
            <tbody>
                {% for appointment in cfc_appointments %}
                <tr>
                    <td>{{ appointment.date }}</td>
                    <td>{{ appointment.time }}</td>
                    <td>{{ appointment.patient.get_full_name }}</td>
                    <td>
                        {% if appointment.doctor %}
                            Dr. {{ appointment.doctor.get_full_name }}
                        {% elif appointment.nurse %}
                            Nurse {{ appointment.nurse.get_full_name }}
                        {% endif %}
                    </td>
                    <td>{{ appointment.get_status_display }}</td>
                    <td>
                        {% if appointment.completedforwardedcanceled %}
                            {{ appointment.completedforwardedcanceled.reason }}
                        {% else %}
                            N/A
                        {% endif %}
                    </td>
                </tr>
                {% endfor %}
            </tbody>
        </table>
    {% else %}
        <p class="alert alert-warning text-center">No completed or canceled appointments found.</p>
    {% endif %}
    <div class="text-center mt-4">
        <a href="{% url 'view_appointments' %}" class="btn btn-secondary">Back to Scheduled Appointments</a>
    </div>
</div>
{% endblock %}

{% block extra_head %}
<style>
    .container {
        max-width: 900px;
        margin: 0 auto;
        padding: 20px;
        background: #ffffff;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }
    h2 {
        text-align: center;
        margin-bottom: 20px;
    }
    table {
        width: 100%;
        border-collapse: collapse;
    }
    .table thead th {
        background-color: #343a40;
        color: #ffffff;
    }
    .table tbody tr {
        background-color: #f9f9f9;
    }
    .table tbody tr:nth-child(even) {
        background-color: #e9ecef;
    }
    .table td, .table th {
        padding: 12px;
        text-align: left;
        border: 1px solid #dee2e6;
    }
    .table th {
        text-transform: uppercase;
    }
    .btn {
        margin-top: 20px;
    }
</style>
{% endblock %}


================================================================================

File: E:\SmartCare-Surgery-System\smartcare\templates\appointments\complete_appointment.html
{% extends 'base.html' %}

{% block content %}
<h2>Complete Appointment</h2>
<div class="appointment-details">
    <p><strong>Patient:</strong> {{ appointment.patient.get_full_name }}</p>
    <p><strong>Date:</strong> {{ appointment.date }}</p>
    <p><strong>Time:</strong> {{ appointment.time }}</p>
    <p><strong>Reason:</strong> {{ appointment.reason }}</p>
</div>
<form method="post" action="{% url 'generate_invoice' appointment.id %}">
    {% csrf_token %}
    <p>Are you sure you want to mark this appointment as completed and generate an invoice?</p>
    <button type="submit" class="btn btn-primary">Complete Appointment and Generate Invoice</button>
    <a href="{% url 'appointment_detail' appointment.id %}" class="btn btn-secondary">Cancel</a>
</form>
{% endblock %}

================================================================================

File: E:\SmartCare-Surgery-System\smartcare\templates\appointments\debug_appointments.html
{% extends 'base.html' %}

{% block content %}
<h2>All Appointments (Debug View)</h2>
<table class="table">
    <thead>
        <tr>
            <th>ID</th>
            <th>Date</th>
            <th>Time</th>
            <th>Patient</th>
            <th>Doctor/Nurse</th>
            <th>Status</th>
        </tr>
    </thead>
    <tbody>
        {% for appointment in appointments %}
        <tr>
            <td>{{ appointment.id }}</td>
            <td>{{ appointment.date }}</td>
            <td>{{ appointment.time }}</td>
            <td>{{ appointment.patient.get_full_name }}</td>
            <td>
                {% if appointment.doctor %}
                    Dr. {{ appointment.doctor.get_full_name }}
                {% elif appointment.nurse %}
                    Nurse {{ appointment.nurse.get_full_name }}
                {% endif %}
            </td>
            <td>{{ appointment.get_status_display }}</td>
        </tr>
        {% endfor %}
    </tbody>
</table>
{% endblock %}


================================================================================

File: E:\SmartCare-Surgery-System\smartcare\templates\appointments\financial_reports.html
{% extends 'base.html' %}

{% block extra_head %}
<style>
    .container {
        max-width: 800px;
        margin: 0 auto;
        padding: 20px;
    }

    .form-group {
        margin-bottom: 15px;
    }

    .form-group label {
        font-weight: bold;
    }

    .form-control {
        width: 100%;
        padding: 10px;
        margin-top: 5px;
        border: 1px solid #ddd;
        border-radius: 4px;
    }

    .btn-primary {
        background-color: #4CAF50;
        border: none;
        padding: 10px 20px;
        color: white;
        font-size: 16px;
        cursor: pointer;
        border-radius: 4px;
    }

    .btn-primary:hover {
        background-color: #45a049;
    }

    h2, h3 {
        color: #4CAF50;
        text-align: center;
    }

    table.table {
        width: 100%;
        border-collapse: collapse;
        margin-top: 20px;
    }

    table.table th, table.table td {
        border: 1px solid #ddd;
        padding: 10px;
        text-align: left;
    }

    table.table th {
        background-color: #f4f4f4;
    }

    table.table tbody tr:nth-child(even) {
        background-color: #f9f9f9;
    }

    .summary {
        background-color: #f4f4f4;
        padding: 15px;
        border-radius: 4px;
        margin-bottom: 20px;
    }

    .summary p {
        font-size: 18px;
        margin: 5px 0;
    }
</style>
{% endblock %}

{% block content %}
<div class="container">
    <h2>Financial Reports</h2>

    <form method="post">
        {% csrf_token %}
        <div class="form-group">
            <label for="start_date">Start Date:</label>
            <input type="date" id="start_date" name="start_date" value="{{ start_date|date:'Y-m-d' }}" class="form-control">
        </div>
        <div class="form-group">
            <label for="end_date">End Date:</label>
            <input type="date" id="end_date" name="end_date" value="{{ end_date|date:'Y-m-d' }}" class="form-control">
        </div>
        <button type="submit" class="btn btn-primary">Generate Report</button>
    </form>

    <div class="summary">
        <h3>Summary</h3>
        <p><strong>Total Turnover:</strong> £{{ total_turnover }}</p>
        <p><strong>NHS Charges:</strong> £{{ nhs_charges }}</p>
        <p><strong>Private Payments:</strong> £{{ private_payments }}</p>
    </div>

    <h3>Daily Turnover</h3>
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Amount</th>
            </tr>
        </thead>
        <tbody>
            {% for day in daily_turnover %}
                <tr>
                    <td>{{ day.date_issued__date }}</td>
                    <td>£{{ day.total }}</td>
                </tr>
            {% endfor %}
        </tbody>
    </table>
    <br>
    <h3>Weekly Turnover</h3>
    <table class="table">
        <thead>
            <tr>
                <th>Week</th>
                <th>Amount</th>
            </tr>
        </thead>
        <tbody>
            {% for week in weekly_turnover %}
                <tr>
                    <td>Week {{ week.date_issued__week }}</td>
                    <td>£{{ week.total }}</td>
                </tr>
            {% endfor %}
        </tbody>
    </table>
    <br>
    <div class="container text-center">
        <h3>Monthly Turnover</h3>
        <div class="d-flex justify-content-center">
            <table class="table">
                <thead>
                    <tr>
                        <th style="text-align: center;">Amount</th>
                    </tr>
                </thead>
                <tbody>
                    {% for month in monthly_turnover %}
                        <tr>
                            <td style="text-align: center;">£{{ month.total }}</td>
                        </tr>
                    {% endfor %}
                </tbody>
            </table>
        </div>
    </div>
    {% endblock %}


================================================================================

File: E:\SmartCare-Surgery-System\smartcare\templates\appointments\generate_invoice.html
{% extends 'base.html' %}

{% block title %}Generate Invoice{% endblock %}

{% block extra_head %}
<style>
    .invoice-form {
        max-width: 600px;
        margin: 0 auto;
        padding: 20px;
        background: #f9f9f9;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }
    .form-group {
        margin-bottom: 15px;
    }
    .form-group label {
        display: block;
        margin-bottom: 5px;
        font-weight: bold;
    }
    .form-control {
        width: 100%;
        padding: 8px;
        border: 1px solid #ddd;
        border-radius: 4px;
        box-sizing: border-box;
    }
    .btn-primary {
        background-color: #4CAF50;
        color: white;
        padding: 10px 15px;
        border: none;
        border-radius: 4px;
        cursor: pointer;
    }
    .btn-primary:hover {
        background-color: #45a049;
    }
    .readonly-field {
        background-color: #e9ecef;
        cursor: not-allowed;
    }
    .info-box {
        background-color: #e7f3fe;
        border: 1px solid #b6d4fe;
        padding: 10px;
        border-radius: 4px;
        margin-bottom: 15px;
    }
</style>
{% endblock %}

{% block content %}
<div class="container mt-5">
    <h2>Generate Invoice for Appointment</h2>
    
    <div class="card">
        <div class="card-body">
            <h5 class="card-title">Appointment Details</h5>
            <p><strong>Patient:</strong> {{ appointment.patient.get_full_name }}</p>
            <p><strong>Date:</strong> {{ appointment.date }}</p>
            <p><strong>Time:</strong> {{ appointment.time }} - {{ appointment.end_time }}</p>
            <p><strong>Type:</strong> {{ appointment.get_appointment_type_display }}</p>
            {% if appointment.doctor %}
                <p><strong>Doctor:</strong> {{ appointment.doctor.get_full_name }}</p>
            {% elif appointment.nurse %}
                <p><strong>Nurse:</strong> {{ appointment.nurse.get_full_name }}</p>
            {% endif %}
        </div>
    </div>

    <form method="post" class="mt-4">
        {% csrf_token %}
        <button type="submit" class="btn btn-primary">Generate Invoice</button>
    </form>
</div>
{% endblock %}



================================================================================

File: E:\SmartCare-Surgery-System\smartcare\templates\appointments\issue_prescription.html
{% extends 'base.html' %}

{% block content %}
<h2>Issue Prescription</h2>
<h3>Appointment for {{ appointment.patient }} on {{ appointment.date }} at {{ appointment.time }}</h3>
<form method="post">
    {% csrf_token %}
    {{ form.as_p }}
    <button type="submit">Issue Prescription</button>
</form>
{% endblock %}

================================================================================

File: E:\SmartCare-Surgery-System\smartcare\templates\appointments\list_appointments.html
{% extends 'base.html' %}

{% block content %}
<h2>Your Appointments</h2>
{% if appointments %}
    <ul>
    {% for appointment in appointments %}
        <li>
            {{ appointment.date }} at {{ appointment.time }} - Reason: {{ appointment.reason }}
            {% if appointment.status == 'SCHEDULED' %}
                <a href="{% url 'cancel_appointment' appointment.id %}">Cancel</a>
            {% endif %}
        </li>
    {% endfor %}
    </ul>
{% else %}
    <p>No appointments scheduled.</p>
{% endif %}
{% endblock %}

================================================================================

File: E:\SmartCare-Surgery-System\smartcare\templates\appointments\list_invoices.html
{% extends 'base.html' %}

{% block content %}
<div class="container mt-5">
    <h2>Invoices</h2>
    {% if invoices %}
        <table class="table table-striped table-hover">
            <thead class="thead-dark">
                <tr>
                    <th>Invoice ID</th>
                    <th>Patient</th>
                    <th>Amount</th>
                    <th>Status</th>
                    <th>Date Issued</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
            {% for invoice in invoices %}
                <tr>
                    <td>{{ invoice.id }}</td>
                    <td>{{ invoice.patient.get_full_name }}</td>
                    <td>£{{ invoice.total_amount }}</td>
                    <td>{{ invoice.get_payment_status_display }}</td>
                    <td>{{ invoice.date_issued|date:"F d, Y" }}</td>
                    <td>
                        <a href="{% url 'view_edit_invoice' invoice.id %}" class="btn btn-sm btn-primary">View/Edit</a>
                    </td>
                </tr>
            {% endfor %}
            </tbody>
        </table>
    {% else %}
        <p>No invoices found.</p>
    {% endif %}
</div>
{% endblock %}

{% block extra_head %}
<style>
    .container {
        max-width: 900px;
        margin: 0 auto;
        background: #fff;
        padding: 20px;
        border-radius: 8px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    }

    h2 {
        text-align: center;
        margin-bottom: 20px;
        font-size: 24px;
    }

    .table {
        width: 100%;
        margin-bottom: 1rem;
        color: #212529;
    }

    .table th,
    .table td {
        padding: 0.75rem;
        vertical-align: top;
        border-top: 1px solid #dee2e6;
    }

    .table thead th {
        vertical-align: bottom;
        border-bottom: 2px solid #dee2e6;
    }

    .table tbody + tbody {
        border-top: 2px solid #dee2e6;
    }

    .table .thead-dark th {
        color: #fff;
        background-color: #28aa49;
        border-color: #f5f5f5;
    }

    .table-hover tbody tr:hover {
        color: #212529;
        background-color: rgba(0, 0, 0, 0.075);
    }

    .btn {
        font-size: 14px;
        padding: 5px 10px;
        border-radius: 4px;
    }

    .btn-primary {
        background-color: #007bff;
        border-color: #007bff;
    }

    .btn-primary:hover {
        background-color: #d4d4d4;
        border-color: #004085;
    }

    .text-center {
        text-align: center;
    }
</style>
{% endblock %}


================================================================================

File: E:\SmartCare-Surgery-System\smartcare\templates\appointments\patient_invoices.html
{% extends 'base.html' %}

{% block content %}
<style>
    body, html {
        margin: 0;
        padding: 0;
        height: 100%;
        font-family: Arial, sans-serif;
        background-color: #f0f2f5;
    }

    .custom-container {
        max-width: 900px;
        margin: auto;
        background-color: #fff;
        padding: 20px;
        border-radius: 8px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
    }

    .text-center {
        text-align: center;
    }

    .mb-4 {
        margin-bottom: 20px;
    }

    .table {
        width: 100%;
        border-collapse: collapse;
    }

    .table thead {
        background-color: #4CAF50;
        color: white;
    }

    .table thead th {
        padding: 12px;
        text-align: center;
        border-bottom: 1px solid #ddd;
    }

    .table tbody td {
        padding: 12px;
        border-bottom: 1px solid #ddd;
    }

    .table tbody tr:hover {
        background-color: #f5f5f5;
    }

    .btn {
        padding: 5px 10px;
        border-radius: 4px;
        text-decoration: none;
        color: white;
        background-color: #007bff;
        display: inline-block;
        margin-top: 10px;
    }

    .btn:hover {
        opacity: 0.8;
    }

    .no-invoices {
        text-align: center;
        padding: 20px;
        background-color: #f8f9fa;
        border-radius: 8px;
    }
</style>

<div class="container mt-5 custom-container">
    <h2 class="text-center mb-4">Your Invoices</h2>
    {% if invoices %}
        <table class="table table-striped custom-table">
            <thead>
                <tr>
                    <th>Invoice ID</th>
                    <th>Date</th>
                    <th>Amount</th>
                    <th>Status</th>
                    <th>Action</th>
                </tr>
            </thead>
            <tbody>
                {% for invoice in invoices %}
                <tr>
                    <td>{{ invoice.id }}</td>
                    <td>{{ invoice.date_issued }}</td>
                    <td>£{{ invoice.total_amount }}</td>
                    <td>{{ invoice.get_payment_status_display }}</td>
                    <td>
                        <a href="{% url 'view_edit_invoice' invoice.id %}" class="btn btn-sm btn-primary">View Details</a>
                    </td>
                </tr>
                {% endfor %}
            </tbody>
        </table>
    {% else %}
        <p class="no-invoices">You have no invoices.</p>
    {% endif %}
</div>
{% endblock %}


================================================================================

File: E:\SmartCare-Surgery-System\smartcare\templates\appointments\prescription_detail.html
{% extends 'base.html' %}

{% block content %}
<div class="container mt-5">
    <h2>Prescription Details</h2>
    <div class="card mt-3">
        <div class="card-body">
            <p><strong>Medication:</strong> {{ prescription.medication }}</p>
            <p><strong>Dosage:</strong> {{ prescription.dosage }}</p>
            <p><strong>Instructions:</strong> {{ prescription.instructions }}</p>
            <p><strong>Prescribed by:</strong> Dr. {{ prescription.doctor.get_full_name }}</p>
            <p><strong>Date Prescribed:</strong> {{ prescription.date_prescribed|date:"F d, Y" }}</p>
            <p><strong>Repeatable:</strong> {% if prescription.is_repeatable %}Yes{% else %}No{% endif %}</p>
            <form method="post" action="{% url 'request_prescription' prescription.id %}">
                {% csrf_token %}
                <button type="submit" class="btn btn-primary">Request Repeat</button>
            </form>
            {% if user.is_patient %}
                <a href="{% url 'patient_dashboard' %}" class="btn btn-secondary mt-4">Back to Dashboard</a>
            {% elif user.is_doctor %}
                <a href="{% url 'doctor_dashboard' %}" class="btn btn-secondary mt-4">Back to Dashboard</a>
            {% elif user.is_nurse %}
                <a href="{% url 'nurse_dashboard' %}" class="btn btn-secondary mt-4">Back to Dashboard</a>
            {% elif user.is_staff %}
                <a href="{% url 'admin_dashboard' %}" class="btn btn-secondary mt-4">Back to Dashboard</a>
            {% endif %}
        </div>
    </div>
</div>
{% endblock %}

{% block css %}
<style>
    .container {
        max-width: 600px;
    }
    .card {
        margin-top: 20px;
    }
    .card-body {
        padding: 20px;
    }
    .btn {
        margin-top: 10px;
    }
</style>
{% endblock %}


================================================================================

File: E:\SmartCare-Surgery-System\smartcare\templates\appointments\request_prescription.html
{% extends 'base.html' %}

{% block content %}
<div class="container mt-5">
    <h2>Request Prescription</h2>
    <div class="card">
        <div class="card-body">
            <h5 class="card-title">{{ prescription.medication }}</h5>
            <p class="card-text">Prescribed on {{ prescription.date_prescribed|date:"F d, Y" }}</p>
            <form method="post">
                {% csrf_token %}
                {{ form.as_p }}
                <button type="submit" class="btn btn-primary">Submit Request</button>
            </form>
        </div>
    </div>
    <a href="{% url 'view_prescriptions' %}" class="btn btn-secondary mt-4">Back to Prescriptions</a>
</div>
{% endblock %}

{% block css %}
<style>
    .container {
        max-width: 600px;
    }
    .card {
        margin-top: 20px;
    }
    .card-title {
        font-size: 1.5rem;
        font-weight: bold;
    }
    .card-text {
        margin-bottom: 1.5rem;
    }
    .btn {
        margin-top: 10px;
    }
</style>
{% endblock %}


================================================================================

File: E:\SmartCare-Surgery-System\smartcare\templates\appointments\reschedule_appointment.html
{% extends 'base.html' %}
{% block title %}Reschedule Appointment{% endblock %}
{% block content %}
<h2>Reschedule/Forward Appointment</h2>
<form method="post" id="appointment-form" class="appointment-form">
    {% csrf_token %}
    {{ form.non_field_errors }}
    
    <div class="form-group">
        <label for="{{ form.date.id_for_label }}">Date:</label>
        {{ form.date }}
        {{ form.date.errors }}
    </div>
    
    <div class="form-group">
        <label for="{{ form.time.id_for_label }}">Time:</label>
        {{ form.time }}
        {{ form.time.errors }}
    </div>
    
    <div class="form-group">
        <label for="{{ form.reason.id_for_label }}">Reason:</label>
        {{ form.reason }}
        {{ form.reason.errors }}
    </div>
    
    <div class="form-group">
        <label for="{{ form.doctor_or_nurse.id_for_label }}">Select Type:</label>
        {{ form.doctor_or_nurse }}
        {{ form.doctor_or_nurse.errors }}
    </div>
    
    <div class="form-group" id="specialty-group" style="display: none;">
        <label for="{{ form.specialty.id_for_label }}">Specialty:</label>
        {{ form.specialty }}
        {{ form.specialty.errors }}
    </div>
    
    <div class="form-group">
        <label for="{{ form.staff.id_for_label }}">Select Staff:</label>
        {{ form.staff }}
        {{ form.staff.errors }}
    </div>
    
    <div class="form-group">
        <label for="{{ form.appointment_type.id_for_label }}">Appointment Type:</label>
        {{ form.appointment_type }}
        {{ form.appointment_type.errors }}
    </div>
    
    <button type="submit" class="btn-primary custom-button">Reschedule/Forward Appointment</button>
    <a href="{% url 'view_appointments' %}" class="btn btn-secondary">Back to Appointments</a>
</form>
{% endblock %}

{% block extra_head %}
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.css">
<style>
    .appointment-form {
        max-width: 600px;
        margin: 0 auto;
        padding: 20px;
        background: #f9f9f9;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }

    .appointment-form h2 {
        text-align: center;
        margin-bottom: 20px;
        color: #4CAF50;
    }

    .form-group {
        margin-bottom: 15px;
    }

    .form-group label {
        display: block;
        margin-bottom: 5px;
        font-weight: bold;
    }

    .form-group input[type="text"],
    .form-group input[type="date"],
    .form-group input[type="time"],
    .form-group textarea,
    .form-group select {
        width: 100%;
        padding: 10px;
        border: 1px solid #ddd;
        border-radius: 4px;
        box-sizing: border-box;
    }

    .form-group input[type="text"]:focus,
    .form-group input[type="date"]:focus,
    .form-group input[type="time"]:focus,
    .form-group textarea:focus,
    .form-group select:focus {
        border-color: #4CAF50;
        outline: none;
        box-shadow: 0 0 5px rgba(76, 175, 80, 0.5);
    }

    .btn-primary {
        display: block;
        width: 100%;
        padding: 10px 20px;
        background-color: #4CAF50;
        color: white;
        border: none;
        border-radius: 4px;
        font-size: 16px;
        cursor: pointer;
        text-align: center;
    }

    .btn-primary:hover {
        background-color: #45a049;
    }

    .btn-secondary {
        display: block;
        width: 100%;
        padding: 10px 20px;
        background-color: #f4f4f9;
        color: #4CAF50;
        border: 1px solid #4CAF50;
        border-radius: 4px;
        font-size: 16px;
        cursor: pointer;
        text-align: center;
        margin-top: 10px;
    }

    .btn-secondary:hover {
        background-color: #e8e8e8;
    }
</style>
{% endblock %}

{% block extra_scripts %}
<script src="https://cdn.jsdelivr.net/npm/flatpickr"></script>
<script>
    document.addEventListener('DOMContentLoaded', function() {
        var doctorOrNurseSelect = document.getElementById('{{ form.doctor_or_nurse.id_for_label }}');
        var specialtyGroup = document.getElementById('specialty-group');
        var specialtySelect = document.getElementById('{{ form.specialty.id_for_label }}');
        var staffSelect = document.getElementById('{{ form.staff.id_for_label }}');

        function updateFields() {
            var doctorOrNurse = doctorOrNurseSelect.value;
            var specialty = doctorOrNurse === 'doctor' ? specialtySelect.value : '';

            if (doctorOrNurse === 'doctor') {
                specialtyGroup.style.display = 'block';
            } else {
                specialtyGroup.style.display = 'none';
                specialtySelect.value = '';
            }

            fetch(`{% url 'load_staff' %}?doctor_or_nurse=${doctorOrNurse}&specialty=${specialty}`)
                .then(response => response.json())
                .then(data => {
                    staffSelect.innerHTML = '<option value="">Select Staff</option>';
                    data.forEach(function(item) {
                        var option = document.createElement('option');
                        option.value = item.id;
                        option.textContent = item.name;
                        staffSelect.appendChild(option);
                    });
                });
        }

        doctorOrNurseSelect.addEventListener('change', updateFields);
        specialtySelect.addEventListener('change', updateFields);

        // Initial call to set up the form correctly
        updateFields();

        // Initialize the date picker
        flatpickr('#{{ form.date.id_for_label }}', {
            dateFormat: 'Y-m-d',
            minDate: 'today'
        });

        // Initialize the time picker
        flatpickr('#{{ form.time.id_for_label }}', {
            enableTime: true,
            noCalendar: true,
            dateFormat: "H:i",
            time_24hr: true,
            minuteIncrement: 10
        });
    });
</script>
{% endblock %}


================================================================================

File: E:\SmartCare-Surgery-System\smartcare\templates\appointments\staff_dropdown_list_options.html
<option value="">---------</option>
{% for staff_member in staff %}
<option value="{{ staff_member.pk }}">{{ staff_member.get_full_name }}</option>
{% endfor %}


================================================================================

File: E:\SmartCare-Surgery-System\smartcare\templates\appointments\view_appointments.html
{% extends 'base.html' %}
{% load static %}

{% block extra_css %}
<style>
    .appointments-container {
        max-width: 1000px;
        margin: 0 auto;
        padding: 20px;
    }
    .filter-form {
        background-color: #f8f9fa;
        padding: 15px;
        border-radius: 8px;
        margin-bottom: 20px;
    }
    .appointment-list {
        list-style-type: none;
        padding: 0;
    }
    .appointment-item {
        background-color: white;
        border: 1px solid #e0e0e0;
        border-radius: 8px;
        padding: 15px;
        margin-bottom: 15px;
        display: flex;
        justify-content: space-between;
        align-items: center;
        transition: box-shadow 0.3s ease;
    }
    .appointment-item:hover {
        box-shadow: 0 4px 8px rgba(0,0,0,0.1);
    }
    .appointment-details {
        flex-grow: 1;
    }
    .appointment-actions {
        display: flex;
        gap: 10px;
    }
    .btn-custom {
        padding: 5px 15px;
        border-radius: 5px;
        text-decoration: none;
        transition: background-color 0.3s;
    }
    .btn-view {
        background-color: #007bff;
        color: white;
    }
    .btn-view:hover {
        background-color: #0056b3;
        color: white;
    }
    .btn-cancel {
        background-color: #dc3545;
        color: white;
    }
    .btn-cancel:hover {
        background-color: #c82333;
        color: white;
    }
    .action-buttons {
        margin-top: 20px;
        display: flex;
        gap: 10px;
    }
</style>
{% endblock %}

{% block content %}
<div class="appointments-container">
    <h2 class="mb-4">Appointments</h2>

    <form method="get" class="filter-form">
        {{ filter_form.as_p }}
        <button type="submit" class="btn btn-primary">Filter</button>
    </form>

    {% if appointments %}
        <ul class="appointment-list">
        {% for appointment in appointments %}
            <li class="appointment-item">
                <div class="appointment-details">
                    <strong>{{ appointment.date }} at {{ appointment.time }}</strong><br>
                    Patient: {{ appointment.patient.get_full_name }}<br>
                    Reason: {{ appointment.reason }}<br>
                    Type: {{ appointment.get_appointment_type_display }}
                </div>
                <div class="appointment-actions">
                    <a href="{% url 'appointment_detail' appointment.id %}" class="btn-custom btn-view">View </a>
                    {% if appointment.status == 'SCHEDULED' %}
                        <a href="{% url 'cancel_appointment' appointment.id %}" class="btn-custom btn-cancel"> Cancel</a>
                    {% endif %}
                </div>
            </li>
        {% endfor %}
        </ul>
    {% else %}
        <p>No appointments scheduled.</p>
    {% endif %}

    <div class="action-buttons">
        <a href="{% url 'book_appointment' %}" class="btn btn-primary">Book New Appointment</a>
        <a href="{% url 'view_cfc_appointments' %}" class="btn btn-secondary">View Overview</a>
    </div>
</div>
{% endblock %}

================================================================================

File: E:\SmartCare-Surgery-System\smartcare\templates\appointments\view_edit_invoice.html
{% extends 'base.html' %}

{% block extra_head %}
<link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
<style>
    .fee-list {
        margin-top: 20px;
    }
    .fee-item {
        background-color: #f8f9fa;
        padding: 10px;
        margin-bottom: 10px;
        border-radius: 5px;
    }
</style>
{% endblock %}

{% block content %}
<div class="container mt-5">
    <h2>Invoice Details</h2>
    {% if messages %}
        {% for message in messages %}
            <div class="alert alert-{{ message.tags }} alert-dismissible fade show" role="alert">
                {{ message }}
                <button type="button" class="close" data-dismiss="alert" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
        {% endfor %}
    {% endif %}
    
    <form method="post">
        {% csrf_token %}
        <div class="row">
            <div class="col-md-6">
                <p><strong>Invoice ID:</strong> {{ invoice.id }}</p>
                <p><strong>Patient:</strong> {{ invoice.patient.get_full_name }}</p>
                <p><strong>Patient Type:</strong> {{ invoice.get_patient_type_display }}</p>
                <p><strong>Appointment Date:</strong> {{ invoice.appointment.date }}</p>
                <p><strong>Issued By:</strong> {{ issued_by }}</p>
                <p><strong>Doctor/Nurse:</strong> {{ staff_name }}</p>
                <p><strong>Appointment Type:</strong> {{ appointment_type }}</p>
            </div>
            <div class="col-md-6">
                <div class="form-group">
                    <label for="{{ form.consultation_length.id_for_label }}">Consultation Length (minutes):</label>
                    {{ form.consultation_length }}
                </div>
                {% if user.is_admin %}
                    <div class="form-group">
                        <label for="{{ form.rate.id_for_label }}">Rate (per 10 minutes):</label>
                        {{ form.rate }}
                    </div>
                {% else %}
                    <p><strong>Rate (per 10 minutes):</strong> £{{ invoice.rate }}</p>
                {% endif %}
                {% if user.is_doctor or user.is_nurse or user.is_admin %}
                <div class="form-group">
                    <label for="{{ form.payment_status.id_for_label }}">Payment Status:</label>
                    {{ form.payment_status }}
                </div>
                {% endif %}
            </div>
        </div>
        <h4>Applied Fees</h4>
        <div class="fee-list">
            {% for fee in applied_fees %}
                <div class="fee-item">
                    <p><strong>{{ fee.title }}:</strong> £{{ fee.amount }}</p>
                </div>
            {% empty %}
                <p>No fees applied to this invoice.</p>
            {% endfor %}
        </div>
        
        <p><strong>Total Amount:</strong> £{{ invoice.total_amount }}</p>
        <p><strong>Date Issued:</strong> {{ invoice.date_issued }}</p>
        {% if invoice.date_paid %}
            <p><strong>Date Paid:</strong> {{ invoice.date_paid }}</p>
        {% endif %}
        
        {% if can_edit %}
            <button type="submit" class="btn btn-primary">Update Invoice</button>
        {% endif %}
    </form>
    {% if user.is_doctor or user.is_nurse or user.is_admin %}
    <a href="{% url 'list_invoices' %}" class="btn btn-secondary mt-3">Back to Invoices</a>
    {% endif %}
    {% if user.is_patient %}
    <a href="{% url 'patient_invoices' %}" class="btn btn-secondary mt-3">Back to Invoices</a>
    {% endif %}
</div>
{% endblock %}

{% block extra_scripts %}
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.bundle.min.js"></script>
{% endblock %}

================================================================================

File: E:\SmartCare-Surgery-System\smartcare\templates\appointments\view_prescriptions.html
{% extends 'base.html' %}

{% block content %}
<div class="container mt-5">
    {% if user.is_doctor or user.is_nurse %}
        <h3>Prescription Requests</h3>
        {% if prescription_requests %}
            <ul class="list-group">
                {% for request in prescription_requests %}
                    <li class="list-group-item d-flex justify-content-between align-items-center">
                        {{ request.prescription.medication }} - Requested by {{ request.patient.get_full_name }}
                        <form method="post" action="{% url 'view_prescriptions' %}" class="d-flex align-items-center mb-0">
                            {% csrf_token %}
                            <input type="hidden" name="request_id" value="{{ request.id }}">
                            <select name="status" class="form-select form-select-sm me-2">
                                <option value="APPROVED">Approve</option>
                                <option value="REJECTED">Reject</option>
                            </select>
                            <button type="submit" class="btn btn-sm btn-primary">Update Status</button>
                        </form>
                    </li>
                {% endfor %}
            </ul>
        {% else %}
            <p>No pending prescription requests.</p>
        {% endif %}
    {% endif %}

    <h3>Your Prescriptions</h3>
    {% if prescriptions %}
        <ul class="list-group mb-4">
            {% for prescription in prescriptions %}
                <li class="list-group-item d-flex justify-content-between align-items-center">
                    <div>
                        <a href="{% url 'prescription_detail' prescription.id %}">{{ prescription.medication }}</a> - Prescribed on {{ prescription.date_prescribed|date:"F d, Y" }}
                    </div>
                </li>
            {% endfor %}
        </ul>
    {% else %}
        <p>You have no prescriptions.</p>
    {% endif %}
    
</div>
{% endblock %}

{% block css %}
<style>
    .container {
        max-width: 800px;
    }
    .list-group-item {
        padding: 1rem;
    }
    .form-select-sm {
        width: auto;
    }
    .mb-4 {
        margin-bottom: 1.5rem !important;
    }
</style>
{% endblock %}


================================================================================

File: E:\SmartCare-Surgery-System\smartcare\templates\authentication\delete_gp.html
{% extends 'base.html' %}

{% block title %}Delete GP{% endblock %}

{% block content %}
<h1>Delete GP</h1>
<p>Are you sure you want to delete GP <strong>{{ gp.name }}</strong>?</p>
<p>This action cannot be undone.</p>

<form method="post">
    {% csrf_token %}
    <button type="submit" class="btn btn-danger">Delete</button>
    <a href="{% url 'gp_list' %}" class="btn btn-secondary">Cancel</a>
</form>
{% endblock %}


================================================================================

File: E:\SmartCare-Surgery-System\smartcare\templates\authentication\gp_list.html
{% extends 'base.html' %}

{% block title %}GP List{% endblock %}

{% block content %}
<div class="container mt-5">
    <h1 class="text-center mb-4">GP List</h1>
    <div class="text-center mb-3">
        <a href="{% url 'manage_gps' %}" class="btn btn-success">Add New GP</a>
    </div>
    <table class="table table-striped table-hover">
        <thead class="thead-dark">
            <tr>
                <th>Name</th>
                <th>Email</th>
                <th>Phone</th>
                <th>Address</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            {% for gp in gps %}
            <tr>
                <td>{{ gp.name }}</td>
                <td>{{ gp.email }}</td>
                <td>{{ gp.phone|default:"N/A" }}</td>
                <td>{{ gp.address|default:"N/A" }}</td>
                <td>
                    <a href="{% url 'edit_gp' gp.id %}" class="btn btn-sm btn-primary">Edit</a>
                    <a href="{% url 'delete_gp' gp.id %}" class="btn btn-sm btn-danger">Delete</a>
                </td>
            </tr>
            {% empty %}
            <tr>
                <td colspan="5" class="text-center">No GPs available.</td>
            </tr>
            {% endfor %}
        </tbody>
    </table>
</div>
{% endblock %}

{% block extra_head %}
<style>
    .container {
        max-width: 900px;
        margin: 0 auto;
        background: #fff;
        padding: 20px;
        border-radius: 8px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    }

    h1 {
        text-align: center;
        margin-bottom: 20px;
        font-size: 24px;
    }

    .table {
        width: 100%;
        margin-bottom: 1rem;
        color: #212529;
    }

    .table th,
    .table td {
        padding: 0.75rem;
        vertical-align: top;
        border-top: 1px solid #dee2e6;
    }

    .table thead th {
        vertical-align: bottom;
        border-bottom: 2px solid #dee2e6;
    }

    .table tbody + tbody {
        border-top: 2px solid #dee2e6;
    }

    .table .thead-dark th {
        color: #fff;
        background-color: #343a40;
        border-color: #454d55;
    }

    .table-hover tbody tr:hover {
        color: #212529;
        background-color: rgba(0, 0, 0, 0.075);
    }

    .btn {
        font-size: 14px;
        padding: 5px 10px;
        border-radius: 4px;
    }

    .btn-success {
        background-color: #28a745;
        color: white;
        border: none;
    }

    .btn-success:hover {
        background-color: #218838;
        border: none;
    }

    .btn-primary {
        background-color: #007bff;
        border-color: #007bff;
    }

    .btn-primary:hover {
        background-color: #0056b3;
        border-color: #004085;
    }

    .btn-danger {
        background-color: #dc3545;
        border-color: #dc3545;
    }

    .btn-danger:hover {
        background-color: #c82333;
        border-color: #bd2130;
    }

    .text-center {
        text-align: center;
    }

    .mb-3 {
        margin-bottom: 1rem !important;
    }

    .mb-4 {
        margin-bottom: 1.5rem !important;
    }

    .mt-5 {
        margin-top: 3rem !important;
    }
</style>
{% endblock %}


================================================================================

File: E:\SmartCare-Surgery-System\smartcare\templates\authentication\login.html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Login</title>
    {% load static %}
    <link rel="stylesheet" href="{% static 'css/style.css' %}">
</head>
<body>
    <h2>Login</h2>
    <form method="post">
        {% csrf_token %}
        {{ form.as_p }}
        <button type="submit">Login</button>
    </form>
    <p>Don't have an account? <a href="{% url 'register' %}">Register here</a></p>
</body>
</html>


================================================================================

File: E:\SmartCare-Surgery-System\smartcare\templates\authentication\manage_gp.html
{% extends 'base.html' %}

{% block title %}{% if gp %}Edit GP{% else %}Add New GP{% endif %}{% endblock %}

{% block content %}
<div class="container mt-5">
    <h1 class="text-center mb-4">{% if gp %}Edit GP{% else %}Add New GP{% endif %}</h1>
    <form method="post" id="gp-form" class="bg-light p-4 rounded shadow-sm">
        {% csrf_token %}
        {{ form.as_p }}
        <button type="submit" class="btn btn-success">Save GP Details</button>
    </form>
    <div class="text-center mt-3">
        <a href="{% url 'gp_list' %}" class="btn btn-success">Back to GP List</a>
    </div>
</div>
{% endblock %}

{% block extra_head %}
<style>
    .container {
        max-width: 600px;
        margin: 0 auto;
        background: #fff;
        padding: 20px;
        border-radius: 8px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    }

    h1 {
        text-align: center;
        margin-bottom: 20px;
        font-size: 24px;
    }

    .form-control {
        display: block;
        width: 100%;
        padding: 10px;
        font-size: 1rem;
        line-height: 1.5;
        color: #495057;
        background-color: #fff;
        background-clip: padding-box;
        border: 1px solid #ced4da;
        border-radius: 0.25rem;
        transition: border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;
    }

    .form-control:focus {
        border-color: #28a745;
        outline: 0;
        box-shadow: 0 0 0 0.2rem rgba(40, 167, 69, 0.25);
    }

    .btn-success {
        background-color: #28a745;
        color: white;
        border: none;
    }

    .btn-success:hover {
        background-color: #218838;
        border: none;
    }

    .text-center {
        text-align: center;
    }

    .mt-3 {
        margin-top: 1rem !important;
    }

    .mt-5 {
        margin-top: 3rem !important;
    }

    .mb-4 {
        margin-bottom: 1.5rem !important;
    }

    .bg-light {
        background-color: #f8f9fa !important;
    }

    .p-4 {
        padding: 1.5rem !important;
    }

    .rounded {
        border-radius: 0.25rem !important;
    }

    .shadow-sm {
        box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075) !important;
    }
</style>
{% endblock %}

{% block extra_scripts %}
<script src="https://maps.googleapis.com/maps/api/js?key={{ GOOGLE_MAPS_API_KEY }}&libraries=places"></script>
<script>
    function initAutocomplete() {
        var input = document.getElementById('address-input');
        var autocomplete = new google.maps.places.Autocomplete(input);

        autocomplete.addListener('place_changed', function() {
            var place = autocomplete.getPlace();
            if (!place.geometry) {
                console.log("No details available for input: '" + place.name + "'");
                return;
            }

            document.getElementById('id_latitude').value = place.geometry.location.lat();
            document.getElementById('id_longitude').value = place.geometry.location.lng();
        });
    }

    google.maps.event.addDomListener(window, 'load', initAutocomplete);
</script>
{% endblock %}


================================================================================

File: E:\SmartCare-Surgery-System\smartcare\templates\authentication\pending_registrations.html
{% extends 'base.html' %}

{% block content %}
<h2>Pending Registrations</h2>
{% if pending %}
    <table class="table">
        <thead>
            <tr>
                <th>Username</th>
                <th>Email</th>
                <th>User Type</th>
                <th>Action</th>
            </tr>
        </thead>
        <tbody>
            {% for registration in pending %}
            <tr>
                <td>{{ registration.user.username }}</td>
                <td>{{ registration.user.email }}</td>
                <td>{{ registration.user.get_user_type_display }}</td>
                <td>
                    <a href="{% url 'approve_registration' registration.id %}" class="btn btn-success">Approve</a>
                </td>
            </tr>
            {% endfor %}
        </tbody>
    </table>
{% else %}
    <p>No pending registrations.</p>
{% endif %}
{% endblock %}

================================================================================

File: E:\SmartCare-Surgery-System\smartcare\templates\authentication\profile.html
{% extends 'base.html' %}
{% load static %}

{% block title %}Profile{% endblock %}

{% block content %}
<div class="container mt-5">
    <h2 class="mb-4">Your Profile</h2>
    {% if messages %}
        {% for message in messages %}
            <div class="alert alert-{{ message.tags }} alert-dismissible fade show" role="alert">
                {{ message }}
                <button type="button" class="close" data-dismiss="alert" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
        {% endfor %}
    {% endif %}
    <form method="post" id="profile-form">
        {% csrf_token %}
        <div class="form-group">
            <label for="{{ form.first_name.id_for_label }}">First Name:</label>
            {{ form.first_name }}
            {% for error in form.first_name.errors %}
                <p class="text-danger">{{ error }}</p>
            {% endfor %}
        </div>
        <div class="form-group">
            <label for="{{ form.last_name.id_for_label }}">Last Name:</label>
            {{ form.last_name }}
            {% for error in form.last_name.errors %}
                <p class="text-danger">{{ error }}</p>
            {% endfor %}
        </div>
        <div class="form-group">
            <label for="{{ form.email.id_for_label }}">Email:</label>
            {{ form.email }}
            {% for error in form.email.errors %}
                <p class="text-danger">{{ error }}</p>
            {% endfor %}
        </div>
        <div class="form-group">
            <label for="{{ form.date_of_birth.id_for_label }}">Date of Birth:</label>
            {{ form.date_of_birth }}
            {% for error in form.date_of_birth.errors %}
                <p class="text-danger">{{ error }}</p>
            {% endfor %}
        </div>
        <div class="form-group">
            <label for="{{ form.address.id_for_label }}">Address:</label>
            {{ form.address }}
            {% for error in form.address.errors %}
                <p class="text-danger">{{ error }}</p>
            {% endfor %}
        </div>
        <div class="form-group">
            <label for="{{ form.bio.id_for_label }}">Bio:</label>
            {{ form.bio }}
            {% for error in form.bio.errors %}
                <p class="text-danger">{{ error }}</p>
            {% endfor %}
        </div>
        <div class="form-group" id="specialty-group" style="{% if user.user_type != 'doctor' %}display: none;{% endif %}">
            <label for="{{ form.specialty.id_for_label }}">Specialty:</label>
            {{ form.specialty }}
            {% for error in form.specialty.errors %}
                <p class="text-danger">{{ error }}</p>
            {% endfor %}
        </div>
        {{ form.latitude }}
        {{ form.longitude }}
        <button type="submit" class="btn btn-primary">Update Profile</button>
    </form>
</div>
{% endblock %}

{% block extra_head %}
<style>
    .form-group {
        margin-bottom: 15px;
    }
    .form-group label {
        font-weight: bold;
        display: block;
        margin-bottom: 5px;
    }
    .form-control {
        width: 100%;
        padding: 10px;
        border: 1px solid #ddd;
        border-radius: 4px;
        font-size: 16px;
        box-sizing: border-box;
    }
    textarea.form-control {
        resize: vertical;
    }
    .btn-primary {
        background-color: #4CAF50;
        border: none;
        color: white;
        padding: 10px 20px;
        text-align: center;
        text-decoration: none;
        display: inline-block;
        font-size: 16px;
        margin: 4px 2px;
        cursor: pointer;
        border-radius: 4px;
        width: 100%;
    }
    .btn-primary:hover {
        background-color: #45a049;
    }
    .text-danger {
        color: #dc3545;
        font-size: 14px;
        margin-top: 5px;
    }
</style>
{% endblock %}

{% block extra_scripts %}
<script src="https://maps.googleapis.com/maps/api/js?key={{ GOOGLE_MAPS_API_KEY }}&libraries=places"></script>
<script>
    function initAutocomplete() {
        var input = document.querySelector('.address-input');
        var autocomplete = new google.maps.places.Autocomplete(input);

        autocomplete.addListener('place_changed', function() {
            var place = autocomplete.getPlace();
            if (!place.geometry) {
                console.log("No details available for input: '" + place.name + "'");
                return;
            }

            document.getElementById('id_latitude').value = place.geometry.location.lat();
            document.getElementById('id_longitude').value = place.geometry.location.lng();
        });
    }

    document.addEventListener('DOMContentLoaded', function() {
        initAutocomplete();
    });
</script>
{% endblock %}


================================================================================

File: E:\SmartCare-Surgery-System\smartcare\templates\authentication\register.html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Register</title>
    {% load static %}
    <link rel="stylesheet" href="{% static 'css/style.css' %}">
    <style>
        body {
            font-family: Arial, sans-serif;
            line-height: 1.6;
            margin: 0;
            padding: 0;
            background-color: #f4f4f4;
        }
        header {
            background-color: #4CAF50;
            color: white;
            text-align: center;
            padding: 1rem;
        }
        main {
            padding: 2rem;
            max-width: 600px;
            margin: auto;
            background-color: white;
            box-shadow: 0 0 10px rgba(0,0,0,0.1);
        }
        .form-group {
            margin-bottom: 15px;
        }
        .form-group label {
            display: block;
            margin-bottom: 5px;
            font-weight: bold;
        }
        .form-control {
            width: 100%;
            padding: 8px;
            border: 1px solid #ddd;
            border-radius: 4px;
            box-sizing: border-box;
        }
        .text-danger {
            color: #dc3545;
            font-size: 14px;
        }
        button[type="submit"] {
            background-color: #4CAF50;
            color: white;
            padding: 10px 20px;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-size: 16px;
            width: 100%;
        }
        button[type="submit"]:hover {
            background-color: #45a049;
        }
        footer {
            text-align: center;
            padding: 1rem;
            background-color: #333;
            color: white;
        }
        .hidden {
            display: none;
        }
    </style>
</head>
<body>
    <header>
        <h1>Register</h1>
    </header>
    <main>
        <form method="post">
            {% csrf_token %}
            <div class="form-group">
                <label for="{{ form.username.id_for_label }}">Username:</label>
                {{ form.username }}
                {% for error in form.username.errors %}
                    <p class="text-danger">{{ error }}</p>
                {% endfor %}
            </div>
            <div class="form-group">
                <label for="{{ form.first_name.id_for_label }}">First Name:</label>
                {{ form.first_name }}
                {% for error in form.first_name.errors %}
                    <p class="text-danger">{{ error }}</p>
                {% endfor %}
            </div>
            <div class="form-group">
                <label for="{{ form.last_name.id_for_label }}">Last Name:</label>
                {{ form.last_name }}
                {% for error in form.last_name.errors %}
                    <p class="text-danger">{{ error }}</p>
                {% endfor %}
            </div>
            <div class="form-group">
                <label for="{{ form.email.id_for_label }}">Email:</label>
                {{ form.email }}
                {% for error in form.email.errors %}
                    <p class="text-danger">{{ error }}</p>
                {% endfor %}
            </div>
            <div class="form-group">
                <label for="{{ form.date_of_birth.id_for_label }}">Date of Birth:</label>
                {{ form.date_of_birth }}
                {% for error in form.date_of_birth.errors %}
                    <p class="text-danger">{{ error }}</p>
                {% endfor %}
            </div>
            <div class="form-group">
                <label for="{{ form.password1.id_for_label }}">Password:</label>
                {{ form.password1 }}
                {% for error in form.password1.errors %}
                    <p class="text-danger">{{ error }}</p>
                {% endfor %}
            </div>
            <div class="form-group">
                <label for="{{ form.password2.id_for_label }}">Confirm Password:</label>
                {{ form.password2 }}
                {% for error in form.password2.errors %}
                    <p class="text-danger">{{ error }}</p>
                {% endfor %}
            </div>
            <div class="form-group">
                <label for="{{ form.user_type.id_for_label }}">User Type:</label>
                {{ form.user_type }}
                {% for error in form.user_type.errors %}
                    <p class="text-danger">{{ error }}</p>
                {% endfor %}
            </div>
            <div class="form-group specialty-group hidden">
                <label for="{{ form.specialty.id_for_label }}">Specialty:</label>
                {{ form.specialty }}
                {% for error in form.specialty.errors %}
                    <p class="text-danger">{{ error }}</p>
                {% endfor %}
            </div>
            <div class="form-group patient-type-group hidden">
                <label for="{{ form.patient_type.id_for_label }}">Patient Type:</label>
                {{ form.patient_type }}
                {% for error in form.patient_type.errors %}
                    <p class="text-danger">{{ error }}</p>
                {% endfor %}
            </div>
            <div class="form-group">
                <label for="{{ form.address.id_for_label }}">Address:</label>
                {{ form.address }}
                {% for error in form.address.errors %}
                    <p class="text-danger">{{ error }}</p>
                {% endfor %}
            </div>
            {{ form.latitude }}
            {{ form.longitude }}
            <button type="submit">Register</button>
        </form>
    </main>
    <footer>
        <p>&copy; 2024 SmartCare Surgery System</p>
    </footer>
    <script src="https://maps.googleapis.com/maps/api/js?key={{ GOOGLE_MAPS_API_KEY }}&libraries=places"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            var userTypeSelect = document.getElementById('{{ form.user_type.id_for_label }}');
            var specialtyGroup = document.querySelector('.specialty-group');
            var patientTypeGroup = document.querySelector('.patient-type-group');
            var addressInput = document.getElementById('{{ form.address.id_for_label }}');
            var autocomplete = new google.maps.places.Autocomplete(addressInput);

            function updateFields() {
                var selectedType = userTypeSelect.value;
                if (selectedType === 'doctor') {
                    specialtyGroup.classList.remove('hidden');
                    patientTypeGroup.classList.add('hidden');
                } else if (selectedType === 'patient') {
                    specialtyGroup.classList.add('hidden');
                    patientTypeGroup.classList.remove('hidden');
                } else {
                    specialtyGroup.classList.add('hidden');
                    patientTypeGroup.classList.add('hidden');
                }
            }

            userTypeSelect.addEventListener('change', updateFields);

            autocomplete.addListener('place_changed', function() {
                var place = autocomplete.getPlace();
                if (!place.geometry) {
                    console.log("No details available for input: '" + place.name + "'");
                    return;
                }
                document.getElementById('id_latitude').value = place.geometry.location.lat();
                document.getElementById('id_longitude').value = place.geometry.location.lng();
            });

            updateFields();
        });
    </script>
</body>
</html>


================================================================================

File: E:\SmartCare-Surgery-System\smartcare\templates\authentication\unauthorized_access.html
{% load static %}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Unauthorized Access</title>
</head>
<body>
    <h1>Unauthorized Access</h1>
    <p>You do not have permission to view this page.</p>
</body>
</html>


================================================================================

File: E:\SmartCare-Surgery-System\smartcare\templates\collaboration\shared_records_list.html
{% extends 'base.html' %}

{% block content %}
<style>
    .shared-records-table {
        width: 100%;
        border-collapse: collapse;
        margin-top: 20px;
    }
    .shared-records-table th, 
    .shared-records-table td {
        border: 1px solid #ddd;
        padding: 8px;
        text-align: left;
    }
    .shared-records-table th {
        background-color: #4CAF50;
        color: white;
    }
    .shared-records-table tr:nth-child(even) {
        background-color: #f2f2f2;
    }
</style>

<div class="container">
    <h2>Shared Patient Records</h2>
    <table class="shared-records-table">
        <thead>
            <tr>
                <th>Patient</th>
                <th>Shared With (GP)</th>
                <th>Shared By</th>
                <th>Shared Date</th>
                <th>Message</th>
            </tr>
        </thead>
        <tbody>
            {% for record in shared_records %}
            <tr>
                <td>{{ record.patient.get_full_name }}</td>
                <td>{{ record.gp.name }}</td>
                <td>{{ record.shared_by.get_full_name }}</td>
                <td>{{ record.shared_date }}</td>
                <td>{{ record.message|truncatewords:10 }}</td>
            </tr>
            {% endfor %}
        </tbody>
    </table>
</div>
{% endblock %}

================================================================================

File: E:\SmartCare-Surgery-System\smartcare\templates\collaboration\share_patient_record.html
{% extends 'base.html' %}
{% load static %}

{% block content %}
<style>
    body, html {
        margin: 0;
        padding: 0;
        height: 100%;
        font-family: Arial, sans-serif;
    }
    
    .main-container {
        display: flex;
        flex-direction: column;
        align-items: center;
        padding: 20px;
        box-sizing: border-box;
        background-color: #f0f2f5;
    }

    .content-wrapper {
        width: 100%;
        max-width: 800px;
        background-color: white;
        border-radius: 8px;
        padding: 20px;
        box-shadow: 0 2px 10px rgba(0,0,0,0.1);
    }

    .search-form {
        margin-bottom: 20px;
        text-align: center;
    }

    .search-form input[type="text"] {
        width: 70%;
        padding: 10px;
        border: 1px solid #ddd;
        border-radius: 4px;
        font-size: 16px;
    }

    .search-form button {
        padding: 10px 20px;
        background-color: #4CAF50;
        color: white;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        font-size: 16px;
    }

    .patient-table {
        width: 100%;
        border-collapse: collapse;
    }

    .patient-table th, 
    .patient-table td {
        text-align: left;
        padding: 12px;
        border-bottom: 1px solid #ddd;
    }

    .patient-table th {
        background-color: #4CAF50;
        color: white;
    }

    .patient-table tr:hover {
        background-color: #f5f5f5;
    }

    .btn-select {
        background-color: #4CAF50;
        color: white;
        border: none;
        padding: 6px 12px;
        border-radius: 4px;
        cursor: pointer;
        transition: background-color 0.3s;
    }

    .btn-select:hover {
        background-color: #45a049;
    }
</style>

<div class="main-container">
    <div class="content-wrapper">
        <form method="get" class="search-form">
            <input type="text" name="search" placeholder="Search by name, email, or DOB" value="{{ search_query }}">
            <button type="submit">Search</button>
        </form>

        <table class="patient-table">
            <thead>
                <tr>
                    <th>Name</th>
                    <th>Email</th>
                    <th>Date of Birth</th>
                    <th>Action</th>
                </tr>
            </thead>
            <tbody>
                {% for patient in page_obj %}
                <tr>
                    <td>{{ patient.get_full_name }}</td>
                    <td>{{ patient.email }}</td>
                    <td>{{ patient.date_of_birth }}</td>
                    <td>
                        <button class="btn-select" data-patient-id="{{ patient.id }}">Select</button>
                    </td>
                </tr>
                {% endfor %}
            </tbody>
        </table>

        {% if page_obj.has_other_pages %}
        <div class="pagination" style="text-align: center; margin-top: 20px;">
            {% if page_obj.has_previous %}
                <a href="?page={{ page_obj.previous_page_number }}&search={{ search_query }}" style="margin-right: 10px;">&laquo; Previous</a>
            {% endif %}

            {% for i in page_obj.paginator.page_range %}
                {% if page_obj.number == i %}
                    <span style="font-weight: bold; margin: 0 5px;">{{ i }}</span>
                {% else %}
                    <a href="?page={{ i }}&search={{ search_query }}" style="margin: 0 5px;">{{ i }}</a>
                {% endif %}
            {% endfor %}

            {% if page_obj.has_next %}
                <a href="?page={{ page_obj.next_page_number }}&search={{ search_query }}" style="margin-left: 10px;">Next &raquo;</a>
            {% endif %}
        </div>
        {% endif %}
    </div>
</div>

<div class="modal fade" id="shareModal" tabindex="-1" role="dialog" aria-labelledby="shareModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="shareModalLabel">Share Patient Details</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <form id="shareForm">
                    <div class="form-group">
                        <label for="gpSelect">Select GP:</label>
                        <select class="form-control" id="gpSelect" required>
                            {% for gp in gps %}
                                <option value="{{ gp.id }}">{{ gp.name }} ({{ gp.email }})</option>
                            {% endfor %}
                        </select>
                    </div>
                    <div class="form-group">
                        <label for="message">Message:</label>
                        <textarea class="form-control" id="message" rows="5" required></textarea>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary" id="shareButton">Share</button>
            </div>
        </div>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        let selectedPatientId;

        document.querySelectorAll('.btn-select').forEach(function(button) {
            button.addEventListener('click', function() {
                selectedPatientId = this.dataset.patientId;
                $('#shareModal').modal('show');
            });
        });

        document.getElementById('shareButton').addEventListener('click', function() {
            const gpId = document.getElementById('gpSelect').value;
            const message = document.getElementById('message').value;

            fetch('{% url "share_patient_record" %}', {
                method: 'POST',
                body: JSON.stringify({
                    patient_id: selectedPatientId,
                    gp_id: gpId,
                    message: message
                }),
                headers: {
                    'Content-Type': 'application/json',
                    'X-CSRFToken': '{{ csrf_token }}'
                }
            })
            .then(response => response.json())
            .then(data => {
                if (data.status === 'success') {
                    alert('Patient details shared successfully!');
                    $('#shareModal').modal('hide');
                    const selectedButton = document.querySelector(`.btn-select[data-patient-id="${selectedPatientId}"]`);
                    selectedButton.textContent = 'Shared';
                    selectedButton.disabled = true;
                } else {
                    alert('Error sharing patient details. Please try again.');
                }
            })
            .catch(() => {
                alert('Error sharing patient details. Please try again.');
            });
        });
    });
</script>
{% endblock %}


================================================================================

File: E:\SmartCare-Surgery-System\smartcare\templates\collaboration\share_patient_record_email.html
<!DOCTYPE html>
<html>
<body>
    <h2>Patient Details Shared</h2>
    <p>Dear {{ gp.name }},</p>
    <p>The following patient details have been shared with you:</p>

    <h3>Patient Information:</h3>
    <ul>
        <li>Name: {{ patient_details.name }}</li>
        <li>Email: {{ patient_details.email }}</li>
        <li>Date of Birth: {{ patient_details.date_of_birth }}</li>
        <li>Address: {{ patient_details.address }}</li>
        <li>Phone: {{ patient_details.phone_number }}</li>
        <li>Patient Type: {{ patient_details.patient_type }}</li>
    </ul>

    <h3>Prescriptions:</h3>
    {% for prescription in prescriptions %}
    <div style="margin-bottom: 20px;">
        <p><strong>Medication:</strong> {{ prescription.medication }}</p>
        <p><strong>Dosage:</strong> {{ prescription.dosage }}</p>
        <p><strong>Instructions:</strong> {{ prescription.instructions }}</p>
        <p><strong>Date Prescribed:</strong> {{ prescription.date_prescribed }}</p>
    </div>
    {% endfor %}

    <h3>Message from Doctor:</h3>
    <p>{{ message }}</p>

    <p>Best regards,<br>SmartCare Surgery System</p>
</body>
</html>

================================================================================

File: E:\SmartCare-Surgery-System\smartcare\templates\dashboards\admin_dashboard.html
{% extends 'base.html' %}

{% block content %}
<h1 style="text-align: center; margin-top: 20px;">Admin Dashboard</h1>

<h2 style="text-align: center;">Booking Status</h2>
<div style="font-family: Arial, sans-serif; max-width: 400px; margin: 0 auto; padding: 20px;">
    <div style="margin-bottom: 20px;">
        <div style="display: flex; align-items: center; justify-content: space-between;">
            <span style="width: 80px;">Last week:</span>
            <div style="background-color: #e0e0e0; width: 280px; height: 20px; border-radius: 10px; overflow: hidden;">
                <div style="background-color: #4CAF50; width: {{ booking_status.last_week }}%; height: 100%; display: flex; align-items: center; justify-content: flex-end; padding-right: 5px; box-sizing: border-box;">
                    <span style="color: white; font-size: 12px;">{{ booking_status.last_week|floatformat:0 }}%</span>
                </div>
            </div>
        </div>
    </div>
    <div style="margin-bottom: 20px;">
        <div style="display: flex; align-items: center; justify-content: space-between;">
            <span style="width: 80px;">This week:</span>
            <div style="background-color: #e0e0e0; width: 280px; height: 20px; border-radius: 10px; overflow: hidden;">
                <div style="background-color: #2196F3; width: {{ booking_status.this_week }}%; height: 100%; display: flex; align-items: center; justify-content: flex-end; padding-right: 5px; box-sizing: border-box;">
                    <span style="color: white; font-size: 12px;">{{ booking_status.this_week|floatformat:0 }}%</span>
                </div>
            </div>
        </div>
    </div>
    <div>
        <div style="display: flex; align-items: center; justify-content: space-between;">
            <span style="width: 80px;">Next week:</span>
            <div style="background-color: #e0e0e0; width: 280px; height: 20px; border-radius: 10px; overflow: hidden;">
                <div style="background-color: #FFC107; width: {{ booking_status.next_week }}%; height: 100%; display: flex; align-items: center; justify-content: flex-end; padding-right: 5px; box-sizing: border-box;">
                    <span style="color: white; font-size: 12px;">{{ booking_status.next_week|floatformat:0 }}%</span>
                </div>
            </div>
        </div>
    </div>
</div>

<section style="max-width: 800px; margin: 0 auto; padding: 20px;">
    <div style="background: #f9f9f9; padding: 20px; border-radius: 8px; box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1); margin-bottom: 20px;">
        <h2 style="text-align: center; margin-bottom: 20px;">Turnover Reports</h2>
        <form method="post" style="display: flex; flex-direction: column; gap: 10px;">
            {% csrf_token %}
            <div style="display: flex; justify-content: space-between;">
                <label for="start_date">Start Date:</label>
                <input type="date" id="start_date" name="start_date" value="{{ start_date|date:'Y-m-d' }}" style="padding: 5px; border-radius: 4px;">
            </div>
            <div style="display: flex; justify-content: space-between;">
                <label for="end_date">End Date:</label>
                <input type="date" id="end_date" name="end_date" value="{{ end_date|date:'Y-m-d' }}" style="padding: 5px; border-radius: 4px;">
            </div>
            <button type="submit" style="background-color: #4CAF50; color: white; border: none; padding: 10px; border-radius: 4px; cursor: pointer;">Generate Report</button>
        </form>

        <div style="margin-top: 20px;">
            <h3 style="color: #4CAF50;">Daily Turnover</h3>
            <ul style="list-style: none; padding: 0;">
            {% for day in daily_turnover %}
                <li>{{ day.date_issued__date|date:"F d, Y" }}: £{{ day.total }}</li>
            {% endfor %}
            </ul>
        </div>

        <div style="margin-top: 20px;">
            <h3 style="color: #4CAF50;">Weekly Turnover</h3>
            <ul style="list-style: none; padding: 0;">
            {% for week in weekly_turnover %}
                <li>Week {{ week.date_issued__week }}: £{{ week.total }}</li>
            {% endfor %}
            </ul>
        </div>

        <div style="margin-top: 20px;">
            <h3 style="color: #4CAF50;">Monthly Turnover</h3>
            <ul style="list-style: none; padding: 0;">
            {% for month in monthly_turnover %}
                <li>{{ month.date_issued__date|date:"F Y" }} £{{ month.total }}</li>
            {% endfor %}
            </ul>
        </div>
    </div>
</section>

<section style="max-width: 800px; margin: 0 auto; padding: 20px;">
    <div style="background: #f9f9f9; padding: 20px; border-radius: 8px; box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1); margin-bottom: 20px;">
        <h2 style="text-align: center; margin-bottom: 20px;">Patient Statistics</h2>
        <ul style="list-style: none; padding: 0;">
        {% for stat in patient_stats %}
            <li>{{ stat.patient__user_type }}: {{ stat.count }} appointments</li>
        {% endfor %}
        </ul>
    </div>
</section>

<section style="max-width: 800px; margin: 0 auto; padding: 20px;">
    <div style="background: #f9f9f9; padding: 20px; border-radius: 8px; box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);">
        <h2 style="text-align: center; margin-bottom: 20px;">Quick Links</h2>
        <ul style="list-style: none; padding: 0; text-align: center;">
            <li style="margin-bottom: 10px;"><a href="{% url 'manage_users' %}" style="color: #007BFF; text-decoration: none;">Manage Users</a></li>
            <li style="margin-bottom: 10px;"><a href="{% url 'gp_list' %}" style="color: #007BFF; text-decoration: none;">Manage GPs</a></li>
            <li style="margin-bottom: 10px;"><a href="{% url 'financial_reports' %}" style="color: #007BFF; text-decoration: none;">Financial Reports</a></li>
            <li style="margin-bottom: 10px;"><a href="{% url 'manage_appointments' %}" style="color: #007BFF; text-decoration: none;">Manage Appointments</a></li>
            <li style="margin-bottom: 10px;"><a href="{% url 'pending_registrations' %}" style="color: #007BFF; text-decoration: none;">View Pending Registrations</a></li>
        </ul>
    </div>
</section>
{% endblock %}


================================================================================

File: E:\SmartCare-Surgery-System\smartcare\templates\dashboards\dashboard.html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Dashboard</title>
</head>
<body>
    <h2>Dashboard</h2>
    <p>Welcome, {{ user.username }}!</p>
    <p><a href="{% url 'logout' %}">Logout</a></p>
</body>
</html>


================================================================================

File: E:\SmartCare-Surgery-System\smartcare\templates\dashboards\doctor_dashboard.html
{% extends 'base.html' %}
{% load static %}

{% block extra_css %}
<style>
    .dashboard-container {
        max-width: 1000px;
        margin: 0 auto;
        padding: 20px;
    }
    .dashboard-card {
        background-color: white;
        border-radius: 8px;
        padding: 20px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        margin-bottom: 20px;
    }
    .dashboard-card h2 {
        color: #4CAF50;
        border-bottom: 2px solid #4CAF50;
        padding-bottom: 10px;
        margin-bottom: 20px;
    }
    .appointment-list {
        list-style-type: none;
        padding: 0;
    }
    .appointment-item {
        background-color: #f1f8e9;
        border-radius: 5px;
        padding: 10px;
        margin-bottom: 10px;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }
    .btn-details {
        background-color: #4CAF50;
        color: white;
        border: none;
        padding: 5px 10px;
        border-radius: 3px;
        text-decoration: none;
        transition: background-color 0.3s;
    }
    .btn-details:hover {
        background-color: #45a049;
    }
    .collaboration-link {
        display: block;
        padding: 10px;
        background-color: #e8f5e9;
        border-radius: 5px;
        margin-bottom: 10px;
        color: #4CAF50;
        text-decoration: none;
        transition: background-color 0.3s;
    }
    .collaboration-link:hover {
        background-color: #c8e6c9;
    }
</style>
{% endblock %}

{% block content %}
<div class="dashboard-container">
    <h1 class="text-center mb-4">Welcome, Dr. {{ user.get_full_name }}</h1>

    <div class="dashboard-card">
        <h2>Your Upcoming Appointments</h2>
        {% if appointments %}
            <ul class="appointment-list">
            {% for appointment in appointments %}
            {% if appointment.status == 'SCHEDULED' %}
                <li class="appointment-item">
                    <span>
                        {{ appointment.date|date:"F d, Y" }} at {{ appointment.time|time:"H:i" }}
                        with {{ appointment.patient.get_full_name }}
                    </span>
                    <a href="{% url 'appointment_detail' appointment.id %}" class="btn-details">Details</a>
                </li>
            {% endif %}
            {% endfor %}
            </ul>
        {% else %}
            <p>You have no upcoming appointments.</p>
        {% endif %}
    </div>

    <div class="dashboard-card">
        <h2>Recent Prescriptions</h2>
        {% if prescriptions %}
            <ul class="list-group">
            {% for prescription in prescriptions|slice:":5" %}
                <li class="list-group-item">{{ prescription.medication }} for {{ prescription.patient.get_full_name }}</li>
            {% endfor %}
            </ul>
            <a href="{% url 'view_prescriptions' %}" class="btn btn-secondary mt-3">View All Prescriptions</a>
        {% else %}
            <p>No recent prescriptions.</p>
        {% endif %}
    </div>

    <div class="dashboard-card">
        <h2>Collaboration Tools</h2>
    <ul>
       <li><a href="{% url 'share_patient_record' %}" class="collaboration-link">Share Patient Record</a></li> 
       <li><a href="{% url 'shared_records_list' %}" class="collaboration-link">View Shared Records</a></li>
    </ul>
    </div>
</div>
{% endblock %}

================================================================================

File: E:\SmartCare-Surgery-System\smartcare\templates\dashboards\manage_appointments.html
{% extends 'base.html' %}

{% block content %}
<h2>Manage Appointments</h2>
<table class="table">
    <thead>
        <tr>
            <th>Date</th>
            <th>Time</th>
            <th>Patient</th>
            <th>Doctor</th>
            <th>Nurse</th>
            <th>Reason</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
        {% for appointment in appointments %}
        <tr>
            <td>{{ appointment.date }}</td>
            <td>{{ appointment.time }}</td>
            <td>{{ appointment.patient.get_full_name }}</td>
            <td>{{ appointment.doctor.get_full_name|default:"N/A" }}</td>
            <td>{{ appointment.nurse.get_full_name|default:"N/A" }}</td>
            <td>{{ appointment.reason }}</td>
            <td>
                <a href="{% url 'appointment_detail' appointment.id %}" class="btn btn-sm btn-info">View</a>
                <a href="{% url 'reschedule_appointment' appointment.id %}" class="btn btn-sm btn-warning">Reschedule</a>
                <a href="{% url 'cancel_appointment' appointment.id %}" class="btn btn-sm btn-danger">Cancel</a>
                <a href="{% url 'complete_appointment' appointment.id %}" class="btn btn-sm btn-success">Complete</a>
            </td>
        </tr>
        {% endfor %}
    </tbody>
</table>
{% endblock %}

================================================================================

File: E:\SmartCare-Surgery-System\smartcare\templates\dashboards\manage_users.html
{% extends 'base.html' %}
{% load static %}

{% block title %}Manage Users{% endblock %}

{% block content %}
<header style="text-align: center; margin-top: 20px;">
    <h1>Manage Users</h1>
</header>
<main style="max-width: 800px; margin: 0 auto; padding: 20px;">
    <section style="background: #f9f9f9; padding: 20px; border-radius: 8px; box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);">
        <h2 style="text-align: center; margin-bottom: 20px;">Filter Users</h2>
        <form method="get" style="display: flex; justify-content: space-between; margin-bottom: 20px;">
            <select name="user_type" style="padding: 5px; border-radius: 4px;">
                <option value="">All Patient Types</option>
                <option value="nhs" {% if user_type_filter == 'nhs' %}selected{% endif %}>NHS</option>
                <option value="private" {% if user_type_filter == 'private' %}selected{% endif %}>Private</option>
            </select>
            <select name="user_role" style="padding: 5px; border-radius: 4px;">
                <option value="">All Roles</option>
                <option value="patient" {% if user_role_filter == 'patient' %}selected{% endif %}>Patient</option>
                <option value="doctor" {% if user_role_filter == 'doctor' %}selected{% endif %}>Doctor</option>
                <option value="nurse" {% if user_role_filter == 'nurse' %}selected{% endif %}>Nurse</option>
                <option value="admin" {% if user_role_filter == 'admin' %}selected{% endif %}>Admin</option>
            </select>
            <button type="submit" style="background-color: #4CAF50; color: white; border: none; padding: 5px 10px; border-radius: 4px; cursor: pointer;">Filter</button>
        </form>
        
        <h2 style="text-align: center; margin-bottom: 20px;">Users List</h2>
        <ul style="list-style: none; padding: 0;">
            {% for user in users %}
                <li style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 10px; padding: 10px; border-bottom: 1px solid #ddd;">
                    <span>
                        {{ user.username }} - {{ user.get_user_type_display }}
                        {% if user.user_type == 'patient' %} ({{ user.get_patient_type_display }}){% endif %}
                        {% if user.date_of_birth %} - DOB: {{ user.date_of_birth|date:"M d, Y" }}{% endif %}
                        {% if not user.is_active %} (Inactive){% endif %}
                    </span>
                    <div style="display: flex; gap: 5px;">
                        <button onclick="editUser('{{ user.id }}', '{{ user.username }}', '{{ user.email }}', '{{ user.user_type }}', '{{ user.first_name }}', '{{ user.last_name }}', '{{ user.patient_type }}', '{{ user.date_of_birth|date:"Y-m-d" }}', {{ user.is_active|yesno:'true,false' }})" style="background-color: #4CAF50; color: white; border: none; padding: 5px 10px; border-radius: 4px; cursor: pointer;">Edit</button>
                        <form action="{% url 'manage_users' %}" method="post" style="margin: 0;">
                            {% csrf_token %}
                            <input type="hidden" name="user_id" value="{{ user.id }}">
                            <button type="submit" name="delete_user" style="background-color: #f44336; color: white; border: none; padding: 5px 10px; border-radius: 4px; cursor: pointer;">Delete</button>
                        </form>
                    </div>
                </li>
            {% endfor %}
        </ul>
        <h2 style="text-align: center; margin-top: 20px;">Edit User</h2>
        <form method="post" style="max-width: 600px; margin: 20px auto; padding: 20px; background: #fff; border-radius: 8px; box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);">
            {% csrf_token %}
            <input type="hidden" name="user_id" id="edit_user_id">
            {% for field in form %}
                <div style="margin-bottom: 15px;">
                    <label for="{{ field.id_for_label }}" style="display: block; margin-bottom: 5px;">{{ field.label }}</label>
                    {{ field }}
                    {% if field.help_text %}
                        <small style="color: #666;">{{ field.help_text }}</small>
                    {% endif %}
                    {% for error in field.errors %}
                        <p style="color: red;">{{ error }}</p>
                    {% endfor %}
                </div>
            {% endfor %}
            <button type="submit" name="edit_user" style="background-color: #2196F3; color: white; border: none; padding: 10px 20px; border-radius: 4px; cursor: pointer;">Update User</button>
        </form>
    </section>
</main>
<script>
    function editUser(id, username, email, userType, firstName, lastName, patientType, dateOfBirth, isActive) {
        document.getElementById('edit_user_id').value = id;
        document.getElementById('id_username').value = username;
        document.getElementById('id_email').value = email;
        document.getElementById('id_user_type').value = userType;
        document.getElementById('id_first_name').value = firstName;
        document.getElementById('id_last_name').value = lastName;
        document.getElementById('id_date_of_birth').value = dateOfBirth;
        if (document.getElementById('id_patient_type')) {
            document.getElementById('id_patient_type').value = patientType;
        }
        if (document.getElementById('id_is_active')) {
            document.getElementById('id_is_active').checked = isActive;
        }
        // Clear password fields
        if (document.getElementById('id_password1')) {
            document.getElementById('id_password1').value = '';
        }
        if (document.getElementById('id_password2')) {
            document.getElementById('id_password2').value = '';
        }
        // Scroll to the edit form
        document.querySelector('form[method="post"]').scrollIntoView({behavior: 'smooth'});
    }
</script>
{% endblock %}

================================================================================

File: E:\SmartCare-Surgery-System\smartcare\templates\dashboards\nurse_dashboard.html
{% extends 'base.html' %}
{% load static %}

{% block extra_css %}
<style>
    .dashboard-container {
        max-width: 1000px;
        margin: 0 auto;
        padding: 20px;
    }
    .dashboard-card {
        background-color: white;
        border-radius: 8px;
        padding: 20px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        margin-bottom: 20px;
    }
    .dashboard-card h2 {
        color: #4CAF50;
        border-bottom: 2px solid #4CAF50;
        padding-bottom: 10px;
        margin-bottom: 20px;
    }
    .appointment-list {
        list-style-type: none;
        padding: 0;
    }
    .appointment-item {
        background-color: #f1f8e9;
        border-radius: 5px;
        padding: 10px;
        margin-bottom: 10px;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }
    .btn-details {
        background-color: #4CAF50;
        color: white;
        border: none;
        padding: 5px 10px;
        border-radius: 3px;
        text-decoration: none;
        transition: background-color 0.3s;
    }
    .btn-details:hover {
        background-color: #45a049;
    }
</style>
{% endblock %}

{% block content %}
<div class="dashboard-container">
    
    <h1 class="text-center mb-4">Welcome, Nurse {{ user.get_full_name }}</h1>

    <div class="dashboard-card">
        <h2>Today's Appointments</h2>
        {% if appointments %}
            <ul class="appointment-list">
            {% for appointment in appointments %}
            {% if appointment.status == 'SCHEDULED' %}
                <li class="appointment-item">
                    <span>
                        {{ appointment.time|time:"H:i" }} - {{ appointment.patient.get_full_name }}
                    </span>
                    <a href="{% url 'appointment_detail' appointment.id %}" class="btn-details">Details</a>
                </li>
            {% endif %}
            {% endfor %}
            </ul>
        {% else %}
            <p>No appointments for today.</p>
        {% endif %}
    </div>

    <div class="dashboard-card">
        <h2>Recent Prescriptions</h2>
        {% if prescriptions %}
            <ul class="list-group">
            {% for prescription in prescriptions|slice:":5" %}
                <li class="list-group-item">{{ prescription.medication }} for {{ prescription.patient.get_full_name }}</li>
            {% endfor %}
            </ul>
            <a href="{% url 'view_prescriptions' %}" class="btn btn-secondary mt-3">View All Prescriptions</a>
        {% else %}
            <p>No recent prescriptions.</p>
        {% endif %}
    </div>
    
</div>
{% endblock %}

================================================================================

File: E:\SmartCare-Surgery-System\smartcare\templates\dashboards\patient_dashboard.html
{% extends 'base.html' %}
{% load static %}

{% block extra_css %}
<style>
    .dashboard-container {
        max-width: 1000px;
        margin: 0 auto;
        padding: 20px;
    }
    .dashboard-card {
        background-color: white;
        border-radius: 8px;
        padding: 20px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        margin-bottom: 20px;
    }
    .dashboard-card h2 {
        color: #4CAF50;
        border-bottom: 2px solid #4CAF50;
        padding-bottom: 10px;
        margin-bottom: 20px;
    }
    .action-buttons {
        display: flex;
        justify-content: space-between;
        margin-bottom: 20px;
    }
    .btn-custom {
        background-color: #4CAF50;
        color: white;
        border: none;
        padding: 10px 20px;
        border-radius: 5px;
        text-decoration: none;
        transition: background-color 0.3s;
    }
    .btn-custom:hover {
        background-color: #45a049;
    }
    .list-item {
        background-color: #f1f8e9;
        border-radius: 5px;
        padding: 10px;
        margin-bottom: 10px;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }
    .list-item a {
        color: #4CAF50;
        text-decoration: none;
    }
    .list-item a:hover {
        text-decoration: underline;
    }
</style>
{% endblock %}

{% block content %}
<div class="dashboard-container">
    <h1 class="text-center mb-4">Welcome, {{ user.get_full_name }}</h1>

    <div class="action-buttons">
    <ul>
        <li><a href="{% url 'book_appointment' %}" class="btn-custom">Book New Appointment</a></li>
        <li><a href="{% url 'view_appointments' %}" class="btn-custom">View All Appointments</a></li>
    </ul>
    </div>

    <div class="dashboard-card">
        <h2>Your Prescriptions</h2>
        {% if prescriptions %}
            <ul class="list-unstyled">
                {% for prescription in prescriptions %}
                <li class="list-item">
                    <a href="{% url 'prescription_detail' prescription.id %}">
                        {{ prescription.medication }} - {{ prescription.dosage }}
                    </a>
                    <span>Prescribed: {{ prescription.date_prescribed|date:"F d, Y" }}</span>
                </li>
            {% endfor %}
            </ul>
        {% else %}
            <p>You have no active prescriptions.</p>
        {% endif %}
        <a href="{% url 'view_prescriptions' %}" class="btn btn-secondary mt-3">View All Prescriptions</a>
    </div>

    <div class="dashboard-card">
        <h2>Your Invoices</h2>
        {% if invoices %}
            <ul class="list-unstyled">
            {% for invoice in invoices %}
                <li class="list-item">
                    <a href="{% url 'view_edit_invoice' invoice.id %}">
                        Invoice #{{ invoice.id }} - £{{ invoice.total_amount }}
                    </a>
                    <span class="badge {% if invoice.payment_status == 'PAID' %}bg-success{% else %}bg-warning{% endif %}">
                        {{ invoice.get_payment_status_display }}
                    </span>
                </li>
            {% endfor %}
            </ul>
        {% else %}
            <p>You have no invoices.</p>
        {% endif %}
        <a href="{% url 'patient_invoices' %}" class="btn btn-secondary mt-3">View All Invoices</a>
    </div>

    <div class="dashboard-card">
        <h2>Your Upcoming Appointments</h2>
        {% if appointments %}
            <ul class="appointment-list">
            {% for appointment in appointments %}
            {% if appointment.status == 'SCHEDULED' %}
                <li class="appointment-item">
                    <span>
                        {{ appointment.date|date:"F d, Y" }} at {{ appointment.time|time:"H:i" }}
                    </span>
                    <a href="{% url 'appointment_detail' appointment.id %}" class="btn-details">Details</a>
                </li>
            {% endif %}
            {% endfor %}
            </ul>
        {% else %}
            <p>You have no upcoming appointments.</p>
        {% endif %}
    </div>
</div>
{% endblock %}


================================================================================

File: E:\SmartCare-Surgery-System\smartcare\templates\home\homepage.html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>SmartCare Surgery - Homepage</title>
    {% load static %}
    <link rel="stylesheet" href="{% static 'css/style.css' %}">
</head>
<body>
    <h1>Welcome to SmartCare Surgery</h1>
    <p>This is the homepage of the SmartCare Surgery system.</p>
    
    <div>
        <a href="{% url 'login' %}" class="btn btn-primary">Login</a>
        <a href="{% url 'register' %}" class="btn btn-secondary">Register</a>
    </div>
</body>
</html>


================================================================================

File: E:\SmartCare-Surgery-System\smartcare_api\serializers.py
from rest_framework import serializers
from django.contrib.auth import get_user_model
from authentication.models import UserProfile

User = get_user_model()

class UserSerializer(serializers.ModelSerializer):
    password = serializers.CharField(write_only=True)
    latitude = serializers.FloatField(required=False)
    longitude = serializers.FloatField(required=False)

    class Meta:
        model = User
        fields = ('id', 'username', 'password', 'first_name', 'last_name', 'email', 
                  'date_of_birth', 'user_type', 'address', 'latitude', 'longitude', 
                  'patient_type', 'specialty')
        extra_kwargs = {'patient_type': {'required': False}, 'specialty': {'required': False}}

    def validate(self, data):
        user_type = data.get('user_type')
        patient_type = data.get('patient_type')
        specialty = data.get('specialty')

        if user_type == 'patient' and not patient_type:
            raise serializers.ValidationError("Patient type is required for patients.")
        elif user_type == 'doctor' and not specialty:
            raise serializers.ValidationError("Specialty is required for doctors.")
        elif user_type not in ['patient', 'doctor', 'nurse']:
            raise serializers.ValidationError("Invalid user type.")

        return data

    def create(self, validated_data):
        latitude = validated_data.pop('latitude', None)
        longitude = validated_data.pop('longitude', None)
        user = User.objects.create_user(**validated_data)
        UserProfile.objects.update_or_create(
            user=user,
            defaults={'latitude': latitude, 'longitude': longitude}
        )
        return user

    def update(self, instance, validated_data):
        if 'password' in validated_data:
            password = validated_data.pop('password')
            instance.set_password(password)
        return super(UserSerializer, self).update(instance, validated_data)

================================================================================

File: E:\SmartCare-Surgery-System\smartcare_api\urls.py
from django.urls import path, include
from rest_framework.routers import DefaultRouter
from .views import UserViewSet

router = DefaultRouter()
router.register(r'users', UserViewSet)

urlpatterns = [
    path('', include(router.urls)),
]

================================================================================

File: E:\SmartCare-Surgery-System\smartcare_api\views.py
from rest_framework import viewsets, status
from rest_framework.permissions import AllowAny, IsAuthenticated, IsAdminUser
from rest_framework.response import Response
from django.contrib.auth import get_user_model
from .serializers import UserSerializer
from authentication.models import PendingRegistration

User = get_user_model()

class UserViewSet(viewsets.ModelViewSet):
    queryset = User.objects.all()
    serializer_class = UserSerializer

    def get_permissions(self):
        if self.action == 'create':
            return [AllowAny()]
        elif self.action in ['list', 'retrieve']:
            return [IsAuthenticated()]
        return [IsAdminUser()]

    def create(self, request, *args, **kwargs):
        serializer = self.get_serializer(data=request.data)
        serializer.is_valid(raise_exception=True)
        user = serializer.save()
        
        if user.user_type in ['doctor', 'nurse']:
            PendingRegistration.objects.create(user=user)
            user.is_active = False
            user.save()
            return Response({"detail": "Registration pending admin approval."}, status=status.HTTP_201_CREATED)
        
        headers = self.get_success_headers(serializer.data)
        return Response(serializer.data, status=status.HTTP_201_CREATED, headers=headers)

================================================================================

File: E:\SmartCare-Surgery-System\docker-compose.yml
services:
  db:
    image: postgres:13
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=${DB_NAME:-smartcare_db}
      - POSTGRES_USER=${DB_USER:-smartcare_user}
      - POSTGRES_PASSWORD=${DB_PASSWORD:-030700}
    ports:
      - "${DB_PORT:-5432}:5432"
    networks:
      - backend

  web:
    build: .
    command: gunicorn smartcare.wsgi:application --bind 0.0.0.0:8000
    volumes:
      - .:/app
    ports:
      - "8000:8000"
    depends_on:
      - db
    environment:
      - DATABASE_URL=postgres://${DB_USER:-smartcare_user}:${DB_PASSWORD:-030700}@db:5432/${DB_NAME:-smartcare_db}
      - DB_NAME=${DB_NAME:-smartcare_db}
      - DB_USER=${DB_USER:-smartcare_user}
      - DB_PASSWORD=${DB_PASSWORD:-030700}
      - DB_HOST=db
      - DB_PORT=5432
    networks:
      - backend

  drf_services:
    build: .
    command: python manage.py runserver 0.0.0.0:8001
    volumes:
      - .:/app
    ports:
      - "8001:8001"
    depends_on:
      - db
    environment:
      - DATABASE_URL=postgres://${DB_USER:-smartcare_user}:${DB_PASSWORD:-030700}@db:5432/${DB_NAME:-smartcare_db}
      - DB_NAME=${DB_NAME:-smartcare_db}
      - DB_USER=${DB_USER:-smartcare_user}
      - DB_PASSWORD=${DB_PASSWORD:-030700}
      - DB_HOST=db
      - DB_PORT=5432
    networks:
      - backend

networks:
  backend:

volumes:
  postgres_data:

================================================================================

File: E:\SmartCare-Surgery-System\Dockerfile
# Use Python 3.9 instead of the latest
FROM python:3.9

# Set environment variables
ENV PYTHONUNBUFFERED 1
ENV DJANGO_SETTINGS_MODULE smartcare.settings

# Set the working directory in the container
WORKDIR /app

# Copy the requirements file into the container
COPY requirements.txt .

# Install the project dependencies
RUN pip install --no-cache-dir -r requirements.txt

# Copy the project code into the container
COPY . .

# Collect static files
RUN python manage.py collectstatic --noinput

# Expose the port the app runs on
EXPOSE 8000

# Start the application
CMD ["gunicorn", "--bind", "0.0.0.0:8000", "smartcare.wsgi:application"]


================================================================================

File: E:\SmartCare-Surgery-System\requirements.txt
Django==3.2.9
djangorestframework==3.12.4
psycopg2-binary==2.9.1
gunicorn==20.1.0
dj-database-url==0.5.0
google-auth==2.3.3
google-auth-oauthlib==0.4.6
google-auth-httplib2==0.1.0
google-api-python-client==2.31.0

================================================================================

File: E:\SmartCare-Surgery-System\.env
DATABASE_URL=postgres://smartcare_user:030700@localhost:5432/smartcare_db

DB_NAME=smartcare_db
DB_USER=smartcare_user
DB_PASSWORD=030700
DB_HOST=localhost
DB_PORT=5432


================================================================================

